
Lab_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  00000c04  00000c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080027a  0080027a  00000e12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001857  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a56  00000000  00000000  00002847  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bff  00000000  00000000  0000329d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00003e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f8  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de4  00000000  00000000  0000474c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 37       	cpi	r26, 0x7A	; 122
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e7       	ldi	r26, 0x7A	; 122
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3c       	cpi	r26, 0xC0	; 192
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1c 02 	call	0x438	; 0x438 <main>
  9e:	0c 94 00 06 	jmp	0xc00	; 0xc00 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include <stdlib.h>
#include <util/delay.h>

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Habilitar ADC y configurar preescalador a 128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	// Espera a que la conversión termine
	while(ADCSRA & (1<<ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC_Read+0x18>
	// Devuelve el resultado de la conversión
	return ADC;
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  dc:	08 95       	ret

000000de <ADC_Read_Multiple>:

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	6c 01       	movw	r12, r24
  f0:	7b 01       	movw	r14, r22
  f2:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < num_channels; i++) {
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	11 c0       	rjmp	.+34     	; 0x11a <ADC_Read_Multiple+0x3c>
		results[i] = ADC_Read(channels[i]);
  f8:	8c 2f       	mov	r24, r28
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	8c 01       	movw	r16, r24
  fe:	00 0f       	add	r16, r16
 100:	11 1f       	adc	r17, r17
 102:	0e 0d       	add	r16, r14
 104:	1f 1d       	adc	r17, r15
 106:	f6 01       	movw	r30, r12
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	80 81       	ld	r24, Z
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Read>
 112:	f8 01       	movw	r30, r16
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
	// Devuelve el resultado de la conversión
	return ADC;
}

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
	for (uint8_t i = 0; i < num_channels; i++) {
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	cd 17       	cp	r28, r29
 11c:	68 f3       	brcs	.-38     	; 0xf8 <ADC_Read_Multiple+0x1a>
		results[i] = ADC_Read(channels[i]);
	}
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	08 95       	ret

00000130 <Lcd_Port_4>:
////////////////////////////////////////////////////
// 4 Bits.
////////////////////////////////////////////////////
void Lcd_Port_4(char a)
{
	if(a & 1) PORTD |= (1<<PORTD4); else PORTD &= ~(1<<PORTD4);  // D4
 130:	80 ff       	sbrs	r24, 0
 132:	04 c0       	rjmp	.+8      	; 0x13c <Lcd_Port_4+0xc>
 134:	9b b1       	in	r25, 0x0b	; 11
 136:	90 61       	ori	r25, 0x10	; 16
 138:	9b b9       	out	0x0b, r25	; 11
 13a:	03 c0       	rjmp	.+6      	; 0x142 <Lcd_Port_4+0x12>
 13c:	9b b1       	in	r25, 0x0b	; 11
 13e:	9f 7e       	andi	r25, 0xEF	; 239
 140:	9b b9       	out	0x0b, r25	; 11
	if(a & 2) PORTD |= (1<<PORTD5); else PORTD &= ~(1<<PORTD5);  // D5
 142:	81 ff       	sbrs	r24, 1
 144:	04 c0       	rjmp	.+8      	; 0x14e <Lcd_Port_4+0x1e>
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	90 62       	ori	r25, 0x20	; 32
 14a:	9b b9       	out	0x0b, r25	; 11
 14c:	03 c0       	rjmp	.+6      	; 0x154 <Lcd_Port_4+0x24>
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	9f 7d       	andi	r25, 0xDF	; 223
 152:	9b b9       	out	0x0b, r25	; 11
	if(a & 4) PORTD |= (1<<PORTD6); else PORTD &= ~(1<<PORTD6);  // D6
 154:	82 ff       	sbrs	r24, 2
 156:	04 c0       	rjmp	.+8      	; 0x160 <Lcd_Port_4+0x30>
 158:	9b b1       	in	r25, 0x0b	; 11
 15a:	90 64       	ori	r25, 0x40	; 64
 15c:	9b b9       	out	0x0b, r25	; 11
 15e:	03 c0       	rjmp	.+6      	; 0x166 <Lcd_Port_4+0x36>
 160:	9b b1       	in	r25, 0x0b	; 11
 162:	9f 7b       	andi	r25, 0xBF	; 191
 164:	9b b9       	out	0x0b, r25	; 11
	if(a & 8) PORTD |= (1<<PORTD7); else PORTD &= ~(1<<PORTD7);  // D7
 166:	83 ff       	sbrs	r24, 3
 168:	04 c0       	rjmp	.+8      	; 0x172 <Lcd_Port_4+0x42>
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	08 95       	ret
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	8f 77       	andi	r24, 0x7F	; 127
 176:	8b b9       	out	0x0b, r24	; 11
 178:	08 95       	ret

0000017a <Lcd_Cmd_4>:
}

void Lcd_Cmd_4(char a)
{
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
	PORTB &= ~(1<<PORTB1);  // RS = 0
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	85 b9       	out	0x05, r24	; 5
	Lcd_Port_4(a >> 4);      // Enviar los 4 bits más significativos
 184:	8c 2f       	mov	r24, r28
 186:	82 95       	swap	r24
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Port_4>
	PORTB |= (1<<PORTB0);   // Enable = 1
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	81 60       	ori	r24, 0x01	; 1
 192:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9f e1       	ldi	r25, 0x1F	; 31
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <Lcd_Cmd_4+0x1e>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <Lcd_Cmd_4+0x24>
 19e:	00 00       	nop
	_delay_ms(2);           // Ajustar el retardo si es necesario
	PORTB &= ~(1<<PORTB0);  // Enable = 0
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9f e1       	ldi	r25, 0x1F	; 31
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <Lcd_Cmd_4+0x30>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <Lcd_Cmd_4+0x36>
 1b0:	00 00       	nop
	_delay_ms(2);
	Lcd_Port_4(a);           // Enviar los 4 bits menos significativos
 1b2:	8c 2f       	mov	r24, r28
 1b4:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Port_4>
	PORTB |= (1<<PORTB0);   // Enable = 1
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9f e1       	ldi	r25, 0x1F	; 31
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <Lcd_Cmd_4+0x48>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Lcd_Cmd_4+0x4e>
 1c8:	00 00       	nop
	_delay_ms(2);           // Ajustar el retardo si es necesario
	PORTB &= ~(1<<PORTB0);  // Enable = 0
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	85 b9       	out	0x05, r24	; 5
 1d0:	8f e3       	ldi	r24, 0x3F	; 63
 1d2:	9f e1       	ldi	r25, 0x1F	; 31
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <Lcd_Cmd_4+0x5a>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <Lcd_Cmd_4+0x60>
 1da:	00 00       	nop
	_delay_ms(2);
}
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <Lcd_InitLCD4bits>:

void Lcd_InitLCD4bits()
{
	DDRB = 0x03;            // Configurar PB0-PB1 como salidas (RS y Enable)
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;            // Configurar PD4-PD7 como salidas
 1e4:	80 ef       	ldi	r24, 0xF0	; 240
 1e6:	8a b9       	out	0x0a, r24	; 10
	PORTB &= ~(1<<PORTB1);  // RS = 0
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB0);  // Enable = 0
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	89 ef       	ldi	r24, 0xF9	; 249
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <Lcd_InitLCD4bits+0x1a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <Lcd_InitLCD4bits+0x24>
 204:	00 00       	nop
	_delay_ms(20);          // Esperar más tiempo para asegurar que el LCD esté listo
	Lcd_Cmd_4(0x03);
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
 20c:	8f e1       	ldi	r24, 0x1F	; 31
 20e:	9e e4       	ldi	r25, 0x4E	; 78
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <Lcd_InitLCD4bits+0x30>
 214:	00 c0       	rjmp	.+0      	; 0x216 <Lcd_InitLCD4bits+0x36>
 216:	00 00       	nop
	_delay_ms(5);
	Lcd_Cmd_4(0x03);
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
 21e:	8f e9       	ldi	r24, 0x9F	; 159
 220:	9f e0       	ldi	r25, 0x0F	; 15
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <Lcd_InitLCD4bits+0x42>
 226:	00 c0       	rjmp	.+0      	; 0x228 <Lcd_InitLCD4bits+0x48>
 228:	00 00       	nop
	_delay_ms(1);
	Lcd_Cmd_4(0x03);
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
 230:	8f e3       	ldi	r24, 0x3F	; 63
 232:	9c e9       	ldi	r25, 0x9C	; 156
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <Lcd_InitLCD4bits+0x54>
 238:	00 c0       	rjmp	.+0      	; 0x23a <Lcd_InitLCD4bits+0x5a>
 23a:	00 00       	nop
	_delay_ms(10);
	Lcd_Cmd_4(0x02);         // Configurar en modo de 4 bits
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
	Lcd_Cmd_4(0x28);         // Función de 4 bits, 2 líneas, 5x7 dots
 242:	88 e2       	ldi	r24, 0x28	; 40
 244:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
	Lcd_Cmd_4(0x0C);         // Display ON, Cursor OFF
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
	Lcd_Cmd_4(0x01);         // Limpiar Display
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	9f e1       	ldi	r25, 0x1F	; 31
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <Lcd_InitLCD4bits+0x78>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <Lcd_InitLCD4bits+0x7e>
 25e:	00 00       	nop
	_delay_ms(2);
	Lcd_Cmd_4(0x06);         // Incrementar cursor
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
 266:	08 95       	ret

00000268 <Lcd_Clear_4>:
}

void Lcd_Clear_4()
{
	Lcd_Cmd_4(0x01);  // Comando para limpiar el LCD
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
 26e:	8f e3       	ldi	r24, 0x3F	; 63
 270:	9f e1       	ldi	r25, 0x1F	; 31
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <Lcd_Clear_4+0xa>
 276:	00 c0       	rjmp	.+0      	; 0x278 <Lcd_Clear_4+0x10>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <Lcd_Set_Cursor_4>:
}

void Lcd_Set_Cursor_4(char a, char b)
{
	char temp;
	if(a == 1)
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	29 f4       	brne	.+10     	; 0x28a <Lcd_Set_Cursor_4+0xe>
	{
		temp = 0x80 + b;
		Lcd_Cmd_4(temp);
 280:	80 e8       	ldi	r24, 0x80	; 128
 282:	86 0f       	add	r24, r22
 284:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
 288:	08 95       	ret
	}
	else if(a == 2)
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	21 f4       	brne	.+8      	; 0x296 <Lcd_Set_Cursor_4+0x1a>
	{
		temp = 0xC0 + b;
		Lcd_Cmd_4(temp);
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	86 0f       	add	r24, r22
 292:	0e 94 bd 00 	call	0x17a	; 0x17a <Lcd_Cmd_4>
 296:	08 95       	ret

00000298 <Lcd_Write_Char_4>:
	}
}

void Lcd_Write_Char_4(char a)
{
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
	PORTB |= (1<<PORTB1);   // RS = 1
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	85 b9       	out	0x05, r24	; 5
	Lcd_Port_4(a >> 4);      // Enviar los 4 bits más significativos
 2a2:	8c 2f       	mov	r24, r28
 2a4:	82 95       	swap	r24
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Port_4>
	PORTB |= (1<<PORTB0);   // Enable = 1
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	9f e1       	ldi	r25, 0x1F	; 31
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Lcd_Write_Char_4+0x1e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <Lcd_Write_Char_4+0x24>
 2bc:	00 00       	nop
	_delay_ms(2);
	PORTB &= ~(1<<PORTB0);  // Enable = 0
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	8e 7f       	andi	r24, 0xFE	; 254
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	8f e3       	ldi	r24, 0x3F	; 63
 2c6:	9f e1       	ldi	r25, 0x1F	; 31
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <Lcd_Write_Char_4+0x30>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <Lcd_Write_Char_4+0x36>
 2ce:	00 00       	nop
	_delay_ms(2);
	Lcd_Port_4(a);           // Enviar los 4 bits menos significativos
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Port_4>
	PORTB |= (1<<PORTB0);   // Enable = 1
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	85 b9       	out	0x05, r24	; 5
 2dc:	8f e3       	ldi	r24, 0x3F	; 63
 2de:	9f e1       	ldi	r25, 0x1F	; 31
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Lcd_Write_Char_4+0x48>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <Lcd_Write_Char_4+0x4e>
 2e6:	00 00       	nop
	_delay_ms(2);
	PORTB &= ~(1<<PORTB0);  // Enable = 0
 2e8:	85 b1       	in	r24, 0x05	; 5
 2ea:	8e 7f       	andi	r24, 0xFE	; 254
 2ec:	85 b9       	out	0x05, r24	; 5
 2ee:	8f e3       	ldi	r24, 0x3F	; 63
 2f0:	9f e1       	ldi	r25, 0x1F	; 31
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <Lcd_Write_Char_4+0x5a>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <Lcd_Write_Char_4+0x60>
 2f8:	00 00       	nop
	_delay_ms(2);
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <Lcd_Write_String_4>:

void Lcd_Write_String_4(char *a)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
	while(*a)
 304:	03 c0       	rjmp	.+6      	; 0x30c <Lcd_Write_String_4+0xe>
	{
		Lcd_Write_Char_4(*a++);
 306:	21 96       	adiw	r28, 0x01	; 1
 308:	0e 94 4c 01 	call	0x298	; 0x298 <Lcd_Write_Char_4>
	_delay_ms(2);
}

void Lcd_Write_String_4(char *a)
{
	while(*a)
 30c:	88 81       	ld	r24, Y
 30e:	81 11       	cpse	r24, r1
 310:	fa cf       	rjmp	.-12     	; 0x306 <Lcd_Write_String_4+0x8>
	{
		Lcd_Write_Char_4(*a++);
	}
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <display_menu>:
////////////////////////////////////////////////////
// Funciones auxiliares
////////////////////////////////////////////////////

void display_menu(void) {
	UART_TransmitString("\r\n***** Menu *****\r\n");
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
	UART_TransmitString("1. Mostrar valores de ADC\r\n");
 320:	85 e1       	ldi	r24, 0x15	; 21
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
	UART_TransmitString("2. Incrementar contador (+)\r\n");
 328:	81 e3       	ldi	r24, 0x31	; 49
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
	UART_TransmitString("3. Decrementar contador (-)\r\n");
 330:	8f e4       	ldi	r24, 0x4F	; 79
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
	UART_TransmitString("4. Mostrar valor del contador\r\n");
 338:	8d e6       	ldi	r24, 0x6D	; 109
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
	UART_TransmitString("*****************\r\n");
 340:	8d e8       	ldi	r24, 0x8D	; 141
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
	UART_TransmitString("Seleccione una opción: ");
 348:	81 ea       	ldi	r24, 0xA1	; 161
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
 350:	08 95       	ret

00000352 <process_command>:
}

void process_command(char command) {
	switch (command) {
 352:	8d 32       	cpi	r24, 0x2D	; 45
 354:	e1 f1       	breq	.+120    	; 0x3ce <process_command+0x7c>
 356:	18 f4       	brcc	.+6      	; 0x35e <process_command+0xc>
 358:	8b 32       	cpi	r24, 0x2B	; 43
 35a:	59 f1       	breq	.+86     	; 0x3b2 <process_command+0x60>
 35c:	66 c0       	rjmp	.+204    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 35e:	81 33       	cpi	r24, 0x31	; 49
 360:	21 f0       	breq	.+8      	; 0x36a <process_command+0x18>
 362:	84 33       	cpi	r24, 0x34	; 52
 364:	09 f4       	brne	.+2      	; 0x368 <process_command+0x16>
 366:	41 c0       	rjmp	.+130    	; 0x3ea <process_command+0x98>
 368:	60 c0       	rjmp	.+192    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		case '1':
		snprintf(buffer, sizeof(buffer), "Valores ADC - ADC6: %u, ADC7: %u\r\n", adc_results[1], adc_results[0]);
 36a:	ec eb       	ldi	r30, 0xBC	; 188
 36c:	f2 e0       	ldi	r31, 0x02	; 2
 36e:	81 81       	ldd	r24, Z+1	; 0x01
 370:	8f 93       	push	r24
 372:	80 81       	ld	r24, Z
 374:	8f 93       	push	r24
 376:	83 81       	ldd	r24, Z+3	; 0x03
 378:	8f 93       	push	r24
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	8f 93       	push	r24
 37e:	89 eb       	ldi	r24, 0xB9	; 185
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	9f 93       	push	r25
 384:	8f 93       	push	r24
 386:	1f 92       	push	r1
 388:	80 e4       	ldi	r24, 0x40	; 64
 38a:	8f 93       	push	r24
 38c:	8c e7       	ldi	r24, 0x7C	; 124
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	9f 93       	push	r25
 392:	8f 93       	push	r24
 394:	0e 94 08 03 	call	0x610	; 0x610 <snprintf>
		UART_TransmitString(buffer);
 398:	8c e7       	ldi	r24, 0x7C	; 124
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
		break;
 3a0:	8d b7       	in	r24, 0x3d	; 61
 3a2:	9e b7       	in	r25, 0x3e	; 62
 3a4:	0a 96       	adiw	r24, 0x0a	; 10
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	9e bf       	out	0x3e, r25	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	8d bf       	out	0x3d, r24	; 61
 3b0:	40 c0       	rjmp	.+128    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		case '+':
		counter++;
 3b2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
 3b6:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <__data_end+0x1>
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <__data_end+0x1>
 3c0:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <__data_end>
		UART_TransmitString("Contador incrementado.\r\n");
 3c4:	8c ed       	ldi	r24, 0xDC	; 220
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
		break;
 3cc:	32 c0       	rjmp	.+100    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		case '-':
		counter--;
 3ce:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
 3d2:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <__data_end+0x1>
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <__data_end+0x1>
 3dc:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <__data_end>
		UART_TransmitString("Contador decrementado.\r\n");
 3e0:	85 ef       	ldi	r24, 0xF5	; 245
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
		break;
 3e8:	24 c0       	rjmp	.+72     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		case '4':
		snprintf(buffer, sizeof(buffer), "Valor del contador: %d\r\n", counter);
 3ea:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <__data_end+0x1>
 3ee:	8f 93       	push	r24
 3f0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
 3f4:	8f 93       	push	r24
 3f6:	8e e0       	ldi	r24, 0x0E	; 14
 3f8:	92 e0       	ldi	r25, 0x02	; 2
 3fa:	9f 93       	push	r25
 3fc:	8f 93       	push	r24
 3fe:	1f 92       	push	r1
 400:	80 e4       	ldi	r24, 0x40	; 64
 402:	8f 93       	push	r24
 404:	8c e7       	ldi	r24, 0x7C	; 124
 406:	92 e0       	ldi	r25, 0x02	; 2
 408:	9f 93       	push	r25
 40a:	8f 93       	push	r24
 40c:	0e 94 08 03 	call	0x610	; 0x610 <snprintf>
		UART_TransmitString(buffer);
 410:	8c e7       	ldi	r24, 0x7C	; 124
 412:	92 e0       	ldi	r25, 0x02	; 2
 414:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
		break;
 418:	8d b7       	in	r24, 0x3d	; 61
 41a:	9e b7       	in	r25, 0x3e	; 62
 41c:	08 96       	adiw	r24, 0x08	; 8
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	9e bf       	out	0x3e, r25	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	8d bf       	out	0x3d, r24	; 61
 428:	04 c0       	rjmp	.+8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		default:
		UART_TransmitString("Opción inválida. Por favor, seleccione una opción válida.\r\n");
 42a:	87 e2       	ldi	r24, 0x27	; 39
 42c:	92 e0       	ldi	r25, 0x02	; 2
 42e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_TransmitString>
		break;
	}
	display_menu();
 432:	0e 94 8c 01 	call	0x318	; 0x318 <display_menu>
 436:	08 95       	ret

00000438 <main>:
////////////////////////////////////////////////////
// Programa Principal
////////////////////////////////////////////////////

int main(void)
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	00 d0       	rcall	.+0      	; 0x43e <main+0x6>
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
	// Configuración de puertos y periféricos
	DDRD = 0xFF;  // Configura todos los pines del puerto D como salidas
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x03;  // Configura los primeros dos pines del puerto B como salidas
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	84 b9       	out	0x04, r24	; 4
	Lcd_InitLCD4bits();  // Inicializa el LCD en modo de 4 bits
 44a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Lcd_InitLCD4bits>
	ADC_Init();  // Inicializa el ADC
 44e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	UART_Init(BAUD);  // Inicializa la UART
 452:	60 e8       	ldi	r22, 0x80	; 128
 454:	75 e2       	ldi	r23, 0x25	; 37
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 b6 02 	call	0x56c	; 0x56c <UART_Init>

	uint8_t adc_channels[] = {7, 6};  // Canales ADC a leer (ADC7 y ADC6)
 45e:	87 e0       	ldi	r24, 0x07	; 7
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	8a 83       	std	Y+2, r24	; 0x02

	// Configuración inicial del LCD
	Lcd_Clear_4();  // Limpiar el LCD
 466:	0e 94 34 01 	call	0x268	; 0x268 <Lcd_Clear_4>
 46a:	2f ef       	ldi	r18, 0xFF	; 255
 46c:	31 ee       	ldi	r19, 0xE1	; 225
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	21 50       	subi	r18, 0x01	; 1
 472:	30 40       	sbci	r19, 0x00	; 0
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	e1 f7       	brne	.-8      	; 0x470 <main+0x38>
 478:	00 c0       	rjmp	.+0      	; 0x47a <main+0x42>
 47a:	00 00       	nop
	_delay_ms(100);  // Esperar para asegurar que el LCD esté listo
	Lcd_Set_Cursor_4(1, 0);
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 3e 01 	call	0x27c	; 0x27c <Lcd_Set_Cursor_4>
	Lcd_Write_String_4("S1:  S2:  S3:");
 484:	83 e6       	ldi	r24, 0x63	; 99
 486:	92 e0       	ldi	r25, 0x02	; 2
 488:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Lcd_Write_String_4>

	// Mostrar el menú inicial en la consola
	display_menu();
 48c:	0e 94 8c 01 	call	0x318	; 0x318 <display_menu>

	while (1)
	{
		// Leer los valores de los ADC
		ADC_Read_Multiple(adc_channels, adc_results, 2);
 490:	42 e0       	ldi	r20, 0x02	; 2
 492:	6c eb       	ldi	r22, 0xBC	; 188
 494:	72 e0       	ldi	r23, 0x02	; 2
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	0e 94 6f 00 	call	0xde	; 0xde <ADC_Read_Multiple>

		// Mostrar los valores en el LCD
		Lcd_Set_Cursor_4(2, 0);
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	0e 94 3e 01 	call	0x27c	; 0x27c <Lcd_Set_Cursor_4>
		snprintf(buffer, sizeof(buffer), "%4u", adc_results[1]);
 4a6:	0f 2e       	mov	r0, r31
 4a8:	fc eb       	ldi	r31, 0xBC	; 188
 4aa:	cf 2e       	mov	r12, r31
 4ac:	f2 e0       	ldi	r31, 0x02	; 2
 4ae:	df 2e       	mov	r13, r31
 4b0:	f0 2d       	mov	r31, r0
 4b2:	f6 01       	movw	r30, r12
 4b4:	83 81       	ldd	r24, Z+3	; 0x03
 4b6:	8f 93       	push	r24
 4b8:	82 81       	ldd	r24, Z+2	; 0x02
 4ba:	8f 93       	push	r24
 4bc:	0f 2e       	mov	r0, r31
 4be:	f1 e7       	ldi	r31, 0x71	; 113
 4c0:	ef 2e       	mov	r14, r31
 4c2:	f2 e0       	ldi	r31, 0x02	; 2
 4c4:	ff 2e       	mov	r15, r31
 4c6:	f0 2d       	mov	r31, r0
 4c8:	ff 92       	push	r15
 4ca:	ef 92       	push	r14
 4cc:	1f 92       	push	r1
 4ce:	68 94       	set
 4d0:	bb 24       	eor	r11, r11
 4d2:	b6 f8       	bld	r11, 6
 4d4:	bf 92       	push	r11
 4d6:	0c e7       	ldi	r16, 0x7C	; 124
 4d8:	12 e0       	ldi	r17, 0x02	; 2
 4da:	1f 93       	push	r17
 4dc:	0f 93       	push	r16
 4de:	0e 94 08 03 	call	0x610	; 0x610 <snprintf>
		Lcd_Write_String_4(buffer);
 4e2:	c8 01       	movw	r24, r16
 4e4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Lcd_Write_String_4>

		Lcd_Set_Cursor_4(2, 6);
 4e8:	66 e0       	ldi	r22, 0x06	; 6
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	0e 94 3e 01 	call	0x27c	; 0x27c <Lcd_Set_Cursor_4>
		snprintf(buffer, sizeof(buffer), "%4u", adc_results[0]);
 4f0:	f6 01       	movw	r30, r12
 4f2:	81 81       	ldd	r24, Z+1	; 0x01
 4f4:	8f 93       	push	r24
 4f6:	80 81       	ld	r24, Z
 4f8:	8f 93       	push	r24
 4fa:	ff 92       	push	r15
 4fc:	ef 92       	push	r14
 4fe:	1f 92       	push	r1
 500:	bf 92       	push	r11
 502:	1f 93       	push	r17
 504:	0f 93       	push	r16
 506:	0e 94 08 03 	call	0x610	; 0x610 <snprintf>
		Lcd_Write_String_4(buffer);
 50a:	c8 01       	movw	r24, r16
 50c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Lcd_Write_String_4>

		Lcd_Set_Cursor_4(2, 10);
 510:	6a e0       	ldi	r22, 0x0A	; 10
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	0e 94 3e 01 	call	0x27c	; 0x27c <Lcd_Set_Cursor_4>
		snprintf(buffer, sizeof(buffer), "%4d", counter);
 518:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <__data_end+0x1>
 51c:	8f 93       	push	r24
 51e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
 522:	8f 93       	push	r24
 524:	85 e7       	ldi	r24, 0x75	; 117
 526:	92 e0       	ldi	r25, 0x02	; 2
 528:	9f 93       	push	r25
 52a:	8f 93       	push	r24
 52c:	1f 92       	push	r1
 52e:	bf 92       	push	r11
 530:	1f 93       	push	r17
 532:	0f 93       	push	r16
 534:	0e 94 08 03 	call	0x610	; 0x610 <snprintf>
		Lcd_Write_String_4(buffer);
 538:	c8 01       	movw	r24, r16
 53a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Lcd_Write_String_4>

		// Leer y procesar los comandos de la UART
		if (UCSR0A & (1 << RXC0)) {  // Verificar si hay datos disponibles en el buffer de recepción
 53e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	88 23       	and	r24, r24
 54e:	24 f4       	brge	.+8      	; 0x558 <main+0x120>
			char received_char = UART_Receive();
 550:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <UART_Receive>
			process_command(received_char);
 554:	0e 94 a9 01 	call	0x352	; 0x352 <process_command>
 558:	3f ef       	ldi	r19, 0xFF	; 255
 55a:	89 e6       	ldi	r24, 0x69	; 105
 55c:	98 e1       	ldi	r25, 0x18	; 24
 55e:	31 50       	subi	r19, 0x01	; 1
 560:	80 40       	sbci	r24, 0x00	; 0
 562:	90 40       	sbci	r25, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <main+0x126>
 566:	00 c0       	rjmp	.+0      	; 0x568 <main+0x130>
 568:	00 00       	nop
 56a:	92 cf       	rjmp	.-220    	; 0x490 <main+0x58>

0000056c <UART_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
#include "UART.h"

void UART_Init(unsigned long baud_rate) {
 56c:	9b 01       	movw	r18, r22
 56e:	ac 01       	movw	r20, r24
	unsigned int ubrr = F_CPU / 16 / baud_rate - 1;
 570:	60 e4       	ldi	r22, 0x40	; 64
 572:	72 e4       	ldi	r23, 0x42	; 66
 574:	8f e0       	ldi	r24, 0x0F	; 15
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__udivmodsi4>
 57c:	21 50       	subi	r18, 0x01	; 1
 57e:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 580:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 584:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar el receptor y el transmisor
 588:	88 e1       	ldi	r24, 0x18	; 24
 58a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar el formato de datos: 8 bits
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 594:	08 95       	ret

00000596 <UART_Transmit>:
}

void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer de transmisión esté vacío
 596:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 59a:	95 ff       	sbrs	r25, 5
 59c:	fc cf       	rjmp	.-8      	; 0x596 <UART_Transmit>
	UDR0 = data;  // Enviar el dato
 59e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5a2:	08 95       	ret

000005a4 <UART_Receive>:
}

unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
 5a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5a8:	88 23       	and	r24, r24
 5aa:	e4 f7       	brge	.-8      	; 0x5a4 <UART_Receive>
	return UDR0;  // Leer el dato recibido
 5ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 5b0:	08 95       	ret

000005b2 <UART_TransmitString>:

void UART_TransmitString(const char *str) {
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ec 01       	movw	r28, r24
	while (*str) {
 5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <UART_TransmitString+0xe>
		UART_Transmit(*str++);
 5ba:	21 96       	adiw	r28, 0x01	; 1
 5bc:	0e 94 cb 02 	call	0x596	; 0x596 <UART_Transmit>
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
	return UDR0;  // Leer el dato recibido
}

void UART_TransmitString(const char *str) {
	while (*str) {
 5c0:	88 81       	ld	r24, Y
 5c2:	81 11       	cpse	r24, r1
 5c4:	fa cf       	rjmp	.-12     	; 0x5ba <UART_TransmitString+0x8>
		UART_Transmit(*str++);
	}
}
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <__udivmodsi4>:
 5cc:	a1 e2       	ldi	r26, 0x21	; 33
 5ce:	1a 2e       	mov	r1, r26
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	fd 01       	movw	r30, r26
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <__udivmodsi4_ep>

000005d8 <__udivmodsi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	ee 1f       	adc	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	a2 17       	cp	r26, r18
 5e2:	b3 07       	cpc	r27, r19
 5e4:	e4 07       	cpc	r30, r20
 5e6:	f5 07       	cpc	r31, r21
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__udivmodsi4_ep>
 5ea:	a2 1b       	sub	r26, r18
 5ec:	b3 0b       	sbc	r27, r19
 5ee:	e4 0b       	sbc	r30, r20
 5f0:	f5 0b       	sbc	r31, r21

000005f2 <__udivmodsi4_ep>:
 5f2:	66 1f       	adc	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	1a 94       	dec	r1
 5fc:	69 f7       	brne	.-38     	; 0x5d8 <__udivmodsi4_loop>
 5fe:	60 95       	com	r22
 600:	70 95       	com	r23
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	9b 01       	movw	r18, r22
 608:	ac 01       	movw	r20, r24
 60a:	bd 01       	movw	r22, r26
 60c:	cf 01       	movw	r24, r30
 60e:	08 95       	ret

00000610 <snprintf>:
 610:	ae e0       	ldi	r26, 0x0E	; 14
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	ee e0       	ldi	r30, 0x0E	; 14
 616:	f3 e0       	ldi	r31, 0x03	; 3
 618:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__prologue_saves__+0x1c>
 61c:	0d 89       	ldd	r16, Y+21	; 0x15
 61e:	1e 89       	ldd	r17, Y+22	; 0x16
 620:	8f 89       	ldd	r24, Y+23	; 0x17
 622:	98 8d       	ldd	r25, Y+24	; 0x18
 624:	26 e0       	ldi	r18, 0x06	; 6
 626:	2c 83       	std	Y+4, r18	; 0x04
 628:	1a 83       	std	Y+2, r17	; 0x02
 62a:	09 83       	std	Y+1, r16	; 0x01
 62c:	97 ff       	sbrs	r25, 7
 62e:	02 c0       	rjmp	.+4      	; 0x634 <snprintf+0x24>
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e8       	ldi	r25, 0x80	; 128
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	9e 83       	std	Y+6, r25	; 0x06
 638:	8d 83       	std	Y+5, r24	; 0x05
 63a:	ae 01       	movw	r20, r28
 63c:	45 5e       	subi	r20, 0xE5	; 229
 63e:	5f 4f       	sbci	r21, 0xFF	; 255
 640:	69 8d       	ldd	r22, Y+25	; 0x19
 642:	7a 8d       	ldd	r23, Y+26	; 0x1a
 644:	ce 01       	movw	r24, r28
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	0e 94 38 03 	call	0x670	; 0x670 <vfprintf>
 64c:	4d 81       	ldd	r20, Y+5	; 0x05
 64e:	5e 81       	ldd	r21, Y+6	; 0x06
 650:	57 fd       	sbrc	r21, 7
 652:	0a c0       	rjmp	.+20     	; 0x668 <snprintf+0x58>
 654:	2f 81       	ldd	r18, Y+7	; 0x07
 656:	38 85       	ldd	r19, Y+8	; 0x08
 658:	42 17       	cp	r20, r18
 65a:	53 07       	cpc	r21, r19
 65c:	0c f4       	brge	.+2      	; 0x660 <snprintf+0x50>
 65e:	9a 01       	movw	r18, r20
 660:	f8 01       	movw	r30, r16
 662:	e2 0f       	add	r30, r18
 664:	f3 1f       	adc	r31, r19
 666:	10 82       	st	Z, r1
 668:	2e 96       	adiw	r28, 0x0e	; 14
 66a:	e4 e0       	ldi	r30, 0x04	; 4
 66c:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__epilogue_restores__+0x1c>

00000670 <vfprintf>:
 670:	ab e0       	ldi	r26, 0x0B	; 11
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	ee e3       	ldi	r30, 0x3E	; 62
 676:	f3 e0       	ldi	r31, 0x03	; 3
 678:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__prologue_saves__>
 67c:	6c 01       	movw	r12, r24
 67e:	7b 01       	movw	r14, r22
 680:	8a 01       	movw	r16, r20
 682:	fc 01       	movw	r30, r24
 684:	17 82       	std	Z+7, r1	; 0x07
 686:	16 82       	std	Z+6, r1	; 0x06
 688:	83 81       	ldd	r24, Z+3	; 0x03
 68a:	81 ff       	sbrs	r24, 1
 68c:	cc c1       	rjmp	.+920    	; 0xa26 <__stack+0x127>
 68e:	ce 01       	movw	r24, r28
 690:	01 96       	adiw	r24, 0x01	; 1
 692:	3c 01       	movw	r6, r24
 694:	f6 01       	movw	r30, r12
 696:	93 81       	ldd	r25, Z+3	; 0x03
 698:	f7 01       	movw	r30, r14
 69a:	93 fd       	sbrc	r25, 3
 69c:	85 91       	lpm	r24, Z+
 69e:	93 ff       	sbrs	r25, 3
 6a0:	81 91       	ld	r24, Z+
 6a2:	7f 01       	movw	r14, r30
 6a4:	88 23       	and	r24, r24
 6a6:	09 f4       	brne	.+2      	; 0x6aa <vfprintf+0x3a>
 6a8:	ba c1       	rjmp	.+884    	; 0xa1e <__stack+0x11f>
 6aa:	85 32       	cpi	r24, 0x25	; 37
 6ac:	39 f4       	brne	.+14     	; 0x6bc <vfprintf+0x4c>
 6ae:	93 fd       	sbrc	r25, 3
 6b0:	85 91       	lpm	r24, Z+
 6b2:	93 ff       	sbrs	r25, 3
 6b4:	81 91       	ld	r24, Z+
 6b6:	7f 01       	movw	r14, r30
 6b8:	85 32       	cpi	r24, 0x25	; 37
 6ba:	29 f4       	brne	.+10     	; 0x6c6 <vfprintf+0x56>
 6bc:	b6 01       	movw	r22, r12
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 6c4:	e7 cf       	rjmp	.-50     	; 0x694 <vfprintf+0x24>
 6c6:	91 2c       	mov	r9, r1
 6c8:	21 2c       	mov	r2, r1
 6ca:	31 2c       	mov	r3, r1
 6cc:	ff e1       	ldi	r31, 0x1F	; 31
 6ce:	f3 15       	cp	r31, r3
 6d0:	d8 f0       	brcs	.+54     	; 0x708 <vfprintf+0x98>
 6d2:	8b 32       	cpi	r24, 0x2B	; 43
 6d4:	79 f0       	breq	.+30     	; 0x6f4 <vfprintf+0x84>
 6d6:	38 f4       	brcc	.+14     	; 0x6e6 <vfprintf+0x76>
 6d8:	80 32       	cpi	r24, 0x20	; 32
 6da:	79 f0       	breq	.+30     	; 0x6fa <vfprintf+0x8a>
 6dc:	83 32       	cpi	r24, 0x23	; 35
 6de:	a1 f4       	brne	.+40     	; 0x708 <vfprintf+0x98>
 6e0:	23 2d       	mov	r18, r3
 6e2:	20 61       	ori	r18, 0x10	; 16
 6e4:	1d c0       	rjmp	.+58     	; 0x720 <vfprintf+0xb0>
 6e6:	8d 32       	cpi	r24, 0x2D	; 45
 6e8:	61 f0       	breq	.+24     	; 0x702 <vfprintf+0x92>
 6ea:	80 33       	cpi	r24, 0x30	; 48
 6ec:	69 f4       	brne	.+26     	; 0x708 <vfprintf+0x98>
 6ee:	23 2d       	mov	r18, r3
 6f0:	21 60       	ori	r18, 0x01	; 1
 6f2:	16 c0       	rjmp	.+44     	; 0x720 <vfprintf+0xb0>
 6f4:	83 2d       	mov	r24, r3
 6f6:	82 60       	ori	r24, 0x02	; 2
 6f8:	38 2e       	mov	r3, r24
 6fa:	e3 2d       	mov	r30, r3
 6fc:	e4 60       	ori	r30, 0x04	; 4
 6fe:	3e 2e       	mov	r3, r30
 700:	2a c0       	rjmp	.+84     	; 0x756 <vfprintf+0xe6>
 702:	f3 2d       	mov	r31, r3
 704:	f8 60       	ori	r31, 0x08	; 8
 706:	1d c0       	rjmp	.+58     	; 0x742 <vfprintf+0xd2>
 708:	37 fc       	sbrc	r3, 7
 70a:	2d c0       	rjmp	.+90     	; 0x766 <vfprintf+0xf6>
 70c:	20 ed       	ldi	r18, 0xD0	; 208
 70e:	28 0f       	add	r18, r24
 710:	2a 30       	cpi	r18, 0x0A	; 10
 712:	40 f0       	brcs	.+16     	; 0x724 <vfprintf+0xb4>
 714:	8e 32       	cpi	r24, 0x2E	; 46
 716:	b9 f4       	brne	.+46     	; 0x746 <vfprintf+0xd6>
 718:	36 fc       	sbrc	r3, 6
 71a:	81 c1       	rjmp	.+770    	; 0xa1e <__stack+0x11f>
 71c:	23 2d       	mov	r18, r3
 71e:	20 64       	ori	r18, 0x40	; 64
 720:	32 2e       	mov	r3, r18
 722:	19 c0       	rjmp	.+50     	; 0x756 <vfprintf+0xe6>
 724:	36 fe       	sbrs	r3, 6
 726:	06 c0       	rjmp	.+12     	; 0x734 <vfprintf+0xc4>
 728:	8a e0       	ldi	r24, 0x0A	; 10
 72a:	98 9e       	mul	r9, r24
 72c:	20 0d       	add	r18, r0
 72e:	11 24       	eor	r1, r1
 730:	92 2e       	mov	r9, r18
 732:	11 c0       	rjmp	.+34     	; 0x756 <vfprintf+0xe6>
 734:	ea e0       	ldi	r30, 0x0A	; 10
 736:	2e 9e       	mul	r2, r30
 738:	20 0d       	add	r18, r0
 73a:	11 24       	eor	r1, r1
 73c:	22 2e       	mov	r2, r18
 73e:	f3 2d       	mov	r31, r3
 740:	f0 62       	ori	r31, 0x20	; 32
 742:	3f 2e       	mov	r3, r31
 744:	08 c0       	rjmp	.+16     	; 0x756 <vfprintf+0xe6>
 746:	8c 36       	cpi	r24, 0x6C	; 108
 748:	21 f4       	brne	.+8      	; 0x752 <vfprintf+0xe2>
 74a:	83 2d       	mov	r24, r3
 74c:	80 68       	ori	r24, 0x80	; 128
 74e:	38 2e       	mov	r3, r24
 750:	02 c0       	rjmp	.+4      	; 0x756 <vfprintf+0xe6>
 752:	88 36       	cpi	r24, 0x68	; 104
 754:	41 f4       	brne	.+16     	; 0x766 <vfprintf+0xf6>
 756:	f7 01       	movw	r30, r14
 758:	93 fd       	sbrc	r25, 3
 75a:	85 91       	lpm	r24, Z+
 75c:	93 ff       	sbrs	r25, 3
 75e:	81 91       	ld	r24, Z+
 760:	7f 01       	movw	r14, r30
 762:	81 11       	cpse	r24, r1
 764:	b3 cf       	rjmp	.-154    	; 0x6cc <vfprintf+0x5c>
 766:	98 2f       	mov	r25, r24
 768:	9f 7d       	andi	r25, 0xDF	; 223
 76a:	95 54       	subi	r25, 0x45	; 69
 76c:	93 30       	cpi	r25, 0x03	; 3
 76e:	28 f4       	brcc	.+10     	; 0x77a <vfprintf+0x10a>
 770:	0c 5f       	subi	r16, 0xFC	; 252
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	9f e3       	ldi	r25, 0x3F	; 63
 776:	99 83       	std	Y+1, r25	; 0x01
 778:	0d c0       	rjmp	.+26     	; 0x794 <vfprintf+0x124>
 77a:	83 36       	cpi	r24, 0x63	; 99
 77c:	31 f0       	breq	.+12     	; 0x78a <vfprintf+0x11a>
 77e:	83 37       	cpi	r24, 0x73	; 115
 780:	71 f0       	breq	.+28     	; 0x79e <vfprintf+0x12e>
 782:	83 35       	cpi	r24, 0x53	; 83
 784:	09 f0       	breq	.+2      	; 0x788 <vfprintf+0x118>
 786:	59 c0       	rjmp	.+178    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 788:	21 c0       	rjmp	.+66     	; 0x7cc <vfprintf+0x15c>
 78a:	f8 01       	movw	r30, r16
 78c:	80 81       	ld	r24, Z
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	0e 5f       	subi	r16, 0xFE	; 254
 792:	1f 4f       	sbci	r17, 0xFF	; 255
 794:	88 24       	eor	r8, r8
 796:	83 94       	inc	r8
 798:	91 2c       	mov	r9, r1
 79a:	53 01       	movw	r10, r6
 79c:	13 c0       	rjmp	.+38     	; 0x7c4 <vfprintf+0x154>
 79e:	28 01       	movw	r4, r16
 7a0:	f2 e0       	ldi	r31, 0x02	; 2
 7a2:	4f 0e       	add	r4, r31
 7a4:	51 1c       	adc	r5, r1
 7a6:	f8 01       	movw	r30, r16
 7a8:	a0 80       	ld	r10, Z
 7aa:	b1 80       	ldd	r11, Z+1	; 0x01
 7ac:	36 fe       	sbrs	r3, 6
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <vfprintf+0x146>
 7b0:	69 2d       	mov	r22, r9
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <vfprintf+0x14a>
 7b6:	6f ef       	ldi	r22, 0xFF	; 255
 7b8:	7f ef       	ldi	r23, 0xFF	; 255
 7ba:	c5 01       	movw	r24, r10
 7bc:	0e 94 24 05 	call	0xa48	; 0xa48 <strnlen>
 7c0:	4c 01       	movw	r8, r24
 7c2:	82 01       	movw	r16, r4
 7c4:	f3 2d       	mov	r31, r3
 7c6:	ff 77       	andi	r31, 0x7F	; 127
 7c8:	3f 2e       	mov	r3, r31
 7ca:	16 c0       	rjmp	.+44     	; 0x7f8 <vfprintf+0x188>
 7cc:	28 01       	movw	r4, r16
 7ce:	22 e0       	ldi	r18, 0x02	; 2
 7d0:	42 0e       	add	r4, r18
 7d2:	51 1c       	adc	r5, r1
 7d4:	f8 01       	movw	r30, r16
 7d6:	a0 80       	ld	r10, Z
 7d8:	b1 80       	ldd	r11, Z+1	; 0x01
 7da:	36 fe       	sbrs	r3, 6
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <vfprintf+0x174>
 7de:	69 2d       	mov	r22, r9
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <vfprintf+0x178>
 7e4:	6f ef       	ldi	r22, 0xFF	; 255
 7e6:	7f ef       	ldi	r23, 0xFF	; 255
 7e8:	c5 01       	movw	r24, r10
 7ea:	0e 94 19 05 	call	0xa32	; 0xa32 <strnlen_P>
 7ee:	4c 01       	movw	r8, r24
 7f0:	f3 2d       	mov	r31, r3
 7f2:	f0 68       	ori	r31, 0x80	; 128
 7f4:	3f 2e       	mov	r3, r31
 7f6:	82 01       	movw	r16, r4
 7f8:	33 fc       	sbrc	r3, 3
 7fa:	1b c0       	rjmp	.+54     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7fc:	82 2d       	mov	r24, r2
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	88 16       	cp	r8, r24
 802:	99 06       	cpc	r9, r25
 804:	b0 f4       	brcc	.+44     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 806:	b6 01       	movw	r22, r12
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 810:	2a 94       	dec	r2
 812:	f4 cf       	rjmp	.-24     	; 0x7fc <vfprintf+0x18c>
 814:	f5 01       	movw	r30, r10
 816:	37 fc       	sbrc	r3, 7
 818:	85 91       	lpm	r24, Z+
 81a:	37 fe       	sbrs	r3, 7
 81c:	81 91       	ld	r24, Z+
 81e:	5f 01       	movw	r10, r30
 820:	b6 01       	movw	r22, r12
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 828:	21 10       	cpse	r2, r1
 82a:	2a 94       	dec	r2
 82c:	21 e0       	ldi	r18, 0x01	; 1
 82e:	82 1a       	sub	r8, r18
 830:	91 08       	sbc	r9, r1
 832:	81 14       	cp	r8, r1
 834:	91 04       	cpc	r9, r1
 836:	71 f7       	brne	.-36     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 838:	e8 c0       	rjmp	.+464    	; 0xa0a <__stack+0x10b>
 83a:	84 36       	cpi	r24, 0x64	; 100
 83c:	11 f0       	breq	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	89 36       	cpi	r24, 0x69	; 105
 840:	41 f5       	brne	.+80     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 842:	f8 01       	movw	r30, r16
 844:	37 fe       	sbrs	r3, 7
 846:	07 c0       	rjmp	.+14     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	82 81       	ldd	r24, Z+2	; 0x02
 84e:	93 81       	ldd	r25, Z+3	; 0x03
 850:	0c 5f       	subi	r16, 0xFC	; 252
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	08 c0       	rjmp	.+16     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	07 2e       	mov	r0, r23
 85c:	00 0c       	add	r0, r0
 85e:	88 0b       	sbc	r24, r24
 860:	99 0b       	sbc	r25, r25
 862:	0e 5f       	subi	r16, 0xFE	; 254
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	f3 2d       	mov	r31, r3
 868:	ff 76       	andi	r31, 0x6F	; 111
 86a:	3f 2e       	mov	r3, r31
 86c:	97 ff       	sbrs	r25, 7
 86e:	09 c0       	rjmp	.+18     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 870:	90 95       	com	r25
 872:	80 95       	com	r24
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	f0 68       	ori	r31, 0x80	; 128
 880:	3f 2e       	mov	r3, r31
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	a3 01       	movw	r20, r6
 888:	0e 94 6b 05 	call	0xad6	; 0xad6 <__ultoa_invert>
 88c:	88 2e       	mov	r8, r24
 88e:	86 18       	sub	r8, r6
 890:	45 c0       	rjmp	.+138    	; 0x91c <__stack+0x1d>
 892:	85 37       	cpi	r24, 0x75	; 117
 894:	31 f4       	brne	.+12     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 896:	23 2d       	mov	r18, r3
 898:	2f 7e       	andi	r18, 0xEF	; 239
 89a:	b2 2e       	mov	r11, r18
 89c:	2a e0       	ldi	r18, 0x0A	; 10
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	25 c0       	rjmp	.+74     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8a2:	93 2d       	mov	r25, r3
 8a4:	99 7f       	andi	r25, 0xF9	; 249
 8a6:	b9 2e       	mov	r11, r25
 8a8:	8f 36       	cpi	r24, 0x6F	; 111
 8aa:	c1 f0       	breq	.+48     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ac:	18 f4       	brcc	.+6      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8ae:	88 35       	cpi	r24, 0x58	; 88
 8b0:	79 f0       	breq	.+30     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8b2:	b5 c0       	rjmp	.+362    	; 0xa1e <__stack+0x11f>
 8b4:	80 37       	cpi	r24, 0x70	; 112
 8b6:	19 f0       	breq	.+6      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8b8:	88 37       	cpi	r24, 0x78	; 120
 8ba:	21 f0       	breq	.+8      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8bc:	b0 c0       	rjmp	.+352    	; 0xa1e <__stack+0x11f>
 8be:	e9 2f       	mov	r30, r25
 8c0:	e0 61       	ori	r30, 0x10	; 16
 8c2:	be 2e       	mov	r11, r30
 8c4:	b4 fe       	sbrs	r11, 4
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8c8:	fb 2d       	mov	r31, r11
 8ca:	f4 60       	ori	r31, 0x04	; 4
 8cc:	bf 2e       	mov	r11, r31
 8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8d0:	34 fe       	sbrs	r3, 4
 8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8d4:	29 2f       	mov	r18, r25
 8d6:	26 60       	ori	r18, 0x06	; 6
 8d8:	b2 2e       	mov	r11, r18
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8dc:	28 e0       	ldi	r18, 0x08	; 8
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	05 c0       	rjmp	.+10     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8e2:	20 e1       	ldi	r18, 0x10	; 16
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8e8:	20 e1       	ldi	r18, 0x10	; 16
 8ea:	32 e0       	ldi	r19, 0x02	; 2
 8ec:	f8 01       	movw	r30, r16
 8ee:	b7 fe       	sbrs	r11, 7
 8f0:	07 c0       	rjmp	.+14     	; 0x900 <__stack+0x1>
 8f2:	60 81       	ld	r22, Z
 8f4:	71 81       	ldd	r23, Z+1	; 0x01
 8f6:	82 81       	ldd	r24, Z+2	; 0x02
 8f8:	93 81       	ldd	r25, Z+3	; 0x03
 8fa:	0c 5f       	subi	r16, 0xFC	; 252
 8fc:	1f 4f       	sbci	r17, 0xFF	; 255
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
 900:	60 81       	ld	r22, Z
 902:	71 81       	ldd	r23, Z+1	; 0x01
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 5f       	subi	r16, 0xFE	; 254
 90a:	1f 4f       	sbci	r17, 0xFF	; 255
 90c:	a3 01       	movw	r20, r6
 90e:	0e 94 6b 05 	call	0xad6	; 0xad6 <__ultoa_invert>
 912:	88 2e       	mov	r8, r24
 914:	86 18       	sub	r8, r6
 916:	fb 2d       	mov	r31, r11
 918:	ff 77       	andi	r31, 0x7F	; 127
 91a:	3f 2e       	mov	r3, r31
 91c:	36 fe       	sbrs	r3, 6
 91e:	0d c0       	rjmp	.+26     	; 0x93a <__stack+0x3b>
 920:	23 2d       	mov	r18, r3
 922:	2e 7f       	andi	r18, 0xFE	; 254
 924:	a2 2e       	mov	r10, r18
 926:	89 14       	cp	r8, r9
 928:	58 f4       	brcc	.+22     	; 0x940 <__stack+0x41>
 92a:	34 fe       	sbrs	r3, 4
 92c:	0b c0       	rjmp	.+22     	; 0x944 <__stack+0x45>
 92e:	32 fc       	sbrc	r3, 2
 930:	09 c0       	rjmp	.+18     	; 0x944 <__stack+0x45>
 932:	83 2d       	mov	r24, r3
 934:	8e 7e       	andi	r24, 0xEE	; 238
 936:	a8 2e       	mov	r10, r24
 938:	05 c0       	rjmp	.+10     	; 0x944 <__stack+0x45>
 93a:	b8 2c       	mov	r11, r8
 93c:	a3 2c       	mov	r10, r3
 93e:	03 c0       	rjmp	.+6      	; 0x946 <__stack+0x47>
 940:	b8 2c       	mov	r11, r8
 942:	01 c0       	rjmp	.+2      	; 0x946 <__stack+0x47>
 944:	b9 2c       	mov	r11, r9
 946:	a4 fe       	sbrs	r10, 4
 948:	0f c0       	rjmp	.+30     	; 0x968 <__stack+0x69>
 94a:	fe 01       	movw	r30, r28
 94c:	e8 0d       	add	r30, r8
 94e:	f1 1d       	adc	r31, r1
 950:	80 81       	ld	r24, Z
 952:	80 33       	cpi	r24, 0x30	; 48
 954:	21 f4       	brne	.+8      	; 0x95e <__stack+0x5f>
 956:	9a 2d       	mov	r25, r10
 958:	99 7e       	andi	r25, 0xE9	; 233
 95a:	a9 2e       	mov	r10, r25
 95c:	09 c0       	rjmp	.+18     	; 0x970 <__stack+0x71>
 95e:	a2 fe       	sbrs	r10, 2
 960:	06 c0       	rjmp	.+12     	; 0x96e <__stack+0x6f>
 962:	b3 94       	inc	r11
 964:	b3 94       	inc	r11
 966:	04 c0       	rjmp	.+8      	; 0x970 <__stack+0x71>
 968:	8a 2d       	mov	r24, r10
 96a:	86 78       	andi	r24, 0x86	; 134
 96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x71>
 96e:	b3 94       	inc	r11
 970:	a3 fc       	sbrc	r10, 3
 972:	11 c0       	rjmp	.+34     	; 0x996 <__stack+0x97>
 974:	a0 fe       	sbrs	r10, 0
 976:	06 c0       	rjmp	.+12     	; 0x984 <__stack+0x85>
 978:	b2 14       	cp	r11, r2
 97a:	88 f4       	brcc	.+34     	; 0x99e <__stack+0x9f>
 97c:	28 0c       	add	r2, r8
 97e:	92 2c       	mov	r9, r2
 980:	9b 18       	sub	r9, r11
 982:	0e c0       	rjmp	.+28     	; 0x9a0 <__stack+0xa1>
 984:	b2 14       	cp	r11, r2
 986:	60 f4       	brcc	.+24     	; 0x9a0 <__stack+0xa1>
 988:	b6 01       	movw	r22, r12
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 992:	b3 94       	inc	r11
 994:	f7 cf       	rjmp	.-18     	; 0x984 <__stack+0x85>
 996:	b2 14       	cp	r11, r2
 998:	18 f4       	brcc	.+6      	; 0x9a0 <__stack+0xa1>
 99a:	2b 18       	sub	r2, r11
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>
 99e:	98 2c       	mov	r9, r8
 9a0:	21 2c       	mov	r2, r1
 9a2:	a4 fe       	sbrs	r10, 4
 9a4:	10 c0       	rjmp	.+32     	; 0x9c6 <__stack+0xc7>
 9a6:	b6 01       	movw	r22, r12
 9a8:	80 e3       	ldi	r24, 0x30	; 48
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 9b0:	a2 fe       	sbrs	r10, 2
 9b2:	17 c0       	rjmp	.+46     	; 0x9e2 <__stack+0xe3>
 9b4:	a1 fc       	sbrc	r10, 1
 9b6:	03 c0       	rjmp	.+6      	; 0x9be <__stack+0xbf>
 9b8:	88 e7       	ldi	r24, 0x78	; 120
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__stack+0xc3>
 9be:	88 e5       	ldi	r24, 0x58	; 88
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	b6 01       	movw	r22, r12
 9c4:	0c c0       	rjmp	.+24     	; 0x9de <__stack+0xdf>
 9c6:	8a 2d       	mov	r24, r10
 9c8:	86 78       	andi	r24, 0x86	; 134
 9ca:	59 f0       	breq	.+22     	; 0x9e2 <__stack+0xe3>
 9cc:	a1 fe       	sbrs	r10, 1
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__stack+0xd5>
 9d0:	8b e2       	ldi	r24, 0x2B	; 43
 9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <__stack+0xd7>
 9d4:	80 e2       	ldi	r24, 0x20	; 32
 9d6:	a7 fc       	sbrc	r10, 7
 9d8:	8d e2       	ldi	r24, 0x2D	; 45
 9da:	b6 01       	movw	r22, r12
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 9e2:	89 14       	cp	r8, r9
 9e4:	38 f4       	brcc	.+14     	; 0x9f4 <__stack+0xf5>
 9e6:	b6 01       	movw	r22, r12
 9e8:	80 e3       	ldi	r24, 0x30	; 48
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 9f0:	9a 94       	dec	r9
 9f2:	f7 cf       	rjmp	.-18     	; 0x9e2 <__stack+0xe3>
 9f4:	8a 94       	dec	r8
 9f6:	f3 01       	movw	r30, r6
 9f8:	e8 0d       	add	r30, r8
 9fa:	f1 1d       	adc	r31, r1
 9fc:	80 81       	ld	r24, Z
 9fe:	b6 01       	movw	r22, r12
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 a06:	81 10       	cpse	r8, r1
 a08:	f5 cf       	rjmp	.-22     	; 0x9f4 <__stack+0xf5>
 a0a:	22 20       	and	r2, r2
 a0c:	09 f4       	brne	.+2      	; 0xa10 <__stack+0x111>
 a0e:	42 ce       	rjmp	.-892    	; 0x694 <vfprintf+0x24>
 a10:	b6 01       	movw	r22, r12
 a12:	80 e2       	ldi	r24, 0x20	; 32
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 2f 05 	call	0xa5e	; 0xa5e <fputc>
 a1a:	2a 94       	dec	r2
 a1c:	f6 cf       	rjmp	.-20     	; 0xa0a <__stack+0x10b>
 a1e:	f6 01       	movw	r30, r12
 a20:	86 81       	ldd	r24, Z+6	; 0x06
 a22:	97 81       	ldd	r25, Z+7	; 0x07
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <__stack+0x12b>
 a26:	8f ef       	ldi	r24, 0xFF	; 255
 a28:	9f ef       	ldi	r25, 0xFF	; 255
 a2a:	2b 96       	adiw	r28, 0x0b	; 11
 a2c:	e2 e1       	ldi	r30, 0x12	; 18
 a2e:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__epilogue_restores__>

00000a32 <strnlen_P>:
 a32:	fc 01       	movw	r30, r24
 a34:	05 90       	lpm	r0, Z+
 a36:	61 50       	subi	r22, 0x01	; 1
 a38:	70 40       	sbci	r23, 0x00	; 0
 a3a:	01 10       	cpse	r0, r1
 a3c:	d8 f7       	brcc	.-10     	; 0xa34 <strnlen_P+0x2>
 a3e:	80 95       	com	r24
 a40:	90 95       	com	r25
 a42:	8e 0f       	add	r24, r30
 a44:	9f 1f       	adc	r25, r31
 a46:	08 95       	ret

00000a48 <strnlen>:
 a48:	fc 01       	movw	r30, r24
 a4a:	61 50       	subi	r22, 0x01	; 1
 a4c:	70 40       	sbci	r23, 0x00	; 0
 a4e:	01 90       	ld	r0, Z+
 a50:	01 10       	cpse	r0, r1
 a52:	d8 f7       	brcc	.-10     	; 0xa4a <strnlen+0x2>
 a54:	80 95       	com	r24
 a56:	90 95       	com	r25
 a58:	8e 0f       	add	r24, r30
 a5a:	9f 1f       	adc	r25, r31
 a5c:	08 95       	ret

00000a5e <fputc>:
 a5e:	0f 93       	push	r16
 a60:	1f 93       	push	r17
 a62:	cf 93       	push	r28
 a64:	df 93       	push	r29
 a66:	fb 01       	movw	r30, r22
 a68:	23 81       	ldd	r18, Z+3	; 0x03
 a6a:	21 fd       	sbrc	r18, 1
 a6c:	03 c0       	rjmp	.+6      	; 0xa74 <fputc+0x16>
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	9f ef       	ldi	r25, 0xFF	; 255
 a72:	2c c0       	rjmp	.+88     	; 0xacc <fputc+0x6e>
 a74:	22 ff       	sbrs	r18, 2
 a76:	16 c0       	rjmp	.+44     	; 0xaa4 <fputc+0x46>
 a78:	46 81       	ldd	r20, Z+6	; 0x06
 a7a:	57 81       	ldd	r21, Z+7	; 0x07
 a7c:	24 81       	ldd	r18, Z+4	; 0x04
 a7e:	35 81       	ldd	r19, Z+5	; 0x05
 a80:	42 17       	cp	r20, r18
 a82:	53 07       	cpc	r21, r19
 a84:	44 f4       	brge	.+16     	; 0xa96 <fputc+0x38>
 a86:	a0 81       	ld	r26, Z
 a88:	b1 81       	ldd	r27, Z+1	; 0x01
 a8a:	9d 01       	movw	r18, r26
 a8c:	2f 5f       	subi	r18, 0xFF	; 255
 a8e:	3f 4f       	sbci	r19, 0xFF	; 255
 a90:	31 83       	std	Z+1, r19	; 0x01
 a92:	20 83       	st	Z, r18
 a94:	8c 93       	st	X, r24
 a96:	26 81       	ldd	r18, Z+6	; 0x06
 a98:	37 81       	ldd	r19, Z+7	; 0x07
 a9a:	2f 5f       	subi	r18, 0xFF	; 255
 a9c:	3f 4f       	sbci	r19, 0xFF	; 255
 a9e:	37 83       	std	Z+7, r19	; 0x07
 aa0:	26 83       	std	Z+6, r18	; 0x06
 aa2:	14 c0       	rjmp	.+40     	; 0xacc <fputc+0x6e>
 aa4:	8b 01       	movw	r16, r22
 aa6:	ec 01       	movw	r28, r24
 aa8:	fb 01       	movw	r30, r22
 aaa:	00 84       	ldd	r0, Z+8	; 0x08
 aac:	f1 85       	ldd	r31, Z+9	; 0x09
 aae:	e0 2d       	mov	r30, r0
 ab0:	09 95       	icall
 ab2:	89 2b       	or	r24, r25
 ab4:	e1 f6       	brne	.-72     	; 0xa6e <fputc+0x10>
 ab6:	d8 01       	movw	r26, r16
 ab8:	16 96       	adiw	r26, 0x06	; 6
 aba:	8d 91       	ld	r24, X+
 abc:	9c 91       	ld	r25, X
 abe:	17 97       	sbiw	r26, 0x07	; 7
 ac0:	01 96       	adiw	r24, 0x01	; 1
 ac2:	17 96       	adiw	r26, 0x07	; 7
 ac4:	9c 93       	st	X, r25
 ac6:	8e 93       	st	-X, r24
 ac8:	16 97       	sbiw	r26, 0x06	; 6
 aca:	ce 01       	movw	r24, r28
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	1f 91       	pop	r17
 ad2:	0f 91       	pop	r16
 ad4:	08 95       	ret

00000ad6 <__ultoa_invert>:
 ad6:	fa 01       	movw	r30, r20
 ad8:	aa 27       	eor	r26, r26
 ada:	28 30       	cpi	r18, 0x08	; 8
 adc:	51 f1       	breq	.+84     	; 0xb32 <__ultoa_invert+0x5c>
 ade:	20 31       	cpi	r18, 0x10	; 16
 ae0:	81 f1       	breq	.+96     	; 0xb42 <__ultoa_invert+0x6c>
 ae2:	e8 94       	clt
 ae4:	6f 93       	push	r22
 ae6:	6e 7f       	andi	r22, 0xFE	; 254
 ae8:	6e 5f       	subi	r22, 0xFE	; 254
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	af 4f       	sbci	r26, 0xFF	; 255
 af2:	b1 e0       	ldi	r27, 0x01	; 1
 af4:	3e d0       	rcall	.+124    	; 0xb72 <__ultoa_invert+0x9c>
 af6:	b4 e0       	ldi	r27, 0x04	; 4
 af8:	3c d0       	rcall	.+120    	; 0xb72 <__ultoa_invert+0x9c>
 afa:	67 0f       	add	r22, r23
 afc:	78 1f       	adc	r23, r24
 afe:	89 1f       	adc	r24, r25
 b00:	9a 1f       	adc	r25, r26
 b02:	a1 1d       	adc	r26, r1
 b04:	68 0f       	add	r22, r24
 b06:	79 1f       	adc	r23, r25
 b08:	8a 1f       	adc	r24, r26
 b0a:	91 1d       	adc	r25, r1
 b0c:	a1 1d       	adc	r26, r1
 b0e:	6a 0f       	add	r22, r26
 b10:	71 1d       	adc	r23, r1
 b12:	81 1d       	adc	r24, r1
 b14:	91 1d       	adc	r25, r1
 b16:	a1 1d       	adc	r26, r1
 b18:	20 d0       	rcall	.+64     	; 0xb5a <__ultoa_invert+0x84>
 b1a:	09 f4       	brne	.+2      	; 0xb1e <__ultoa_invert+0x48>
 b1c:	68 94       	set
 b1e:	3f 91       	pop	r19
 b20:	2a e0       	ldi	r18, 0x0A	; 10
 b22:	26 9f       	mul	r18, r22
 b24:	11 24       	eor	r1, r1
 b26:	30 19       	sub	r19, r0
 b28:	30 5d       	subi	r19, 0xD0	; 208
 b2a:	31 93       	st	Z+, r19
 b2c:	de f6       	brtc	.-74     	; 0xae4 <__ultoa_invert+0xe>
 b2e:	cf 01       	movw	r24, r30
 b30:	08 95       	ret
 b32:	46 2f       	mov	r20, r22
 b34:	47 70       	andi	r20, 0x07	; 7
 b36:	40 5d       	subi	r20, 0xD0	; 208
 b38:	41 93       	st	Z+, r20
 b3a:	b3 e0       	ldi	r27, 0x03	; 3
 b3c:	0f d0       	rcall	.+30     	; 0xb5c <__ultoa_invert+0x86>
 b3e:	c9 f7       	brne	.-14     	; 0xb32 <__ultoa_invert+0x5c>
 b40:	f6 cf       	rjmp	.-20     	; 0xb2e <__ultoa_invert+0x58>
 b42:	46 2f       	mov	r20, r22
 b44:	4f 70       	andi	r20, 0x0F	; 15
 b46:	40 5d       	subi	r20, 0xD0	; 208
 b48:	4a 33       	cpi	r20, 0x3A	; 58
 b4a:	18 f0       	brcs	.+6      	; 0xb52 <__ultoa_invert+0x7c>
 b4c:	49 5d       	subi	r20, 0xD9	; 217
 b4e:	31 fd       	sbrc	r19, 1
 b50:	40 52       	subi	r20, 0x20	; 32
 b52:	41 93       	st	Z+, r20
 b54:	02 d0       	rcall	.+4      	; 0xb5a <__ultoa_invert+0x84>
 b56:	a9 f7       	brne	.-22     	; 0xb42 <__ultoa_invert+0x6c>
 b58:	ea cf       	rjmp	.-44     	; 0xb2e <__ultoa_invert+0x58>
 b5a:	b4 e0       	ldi	r27, 0x04	; 4
 b5c:	a6 95       	lsr	r26
 b5e:	97 95       	ror	r25
 b60:	87 95       	ror	r24
 b62:	77 95       	ror	r23
 b64:	67 95       	ror	r22
 b66:	ba 95       	dec	r27
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__ultoa_invert+0x86>
 b6a:	00 97       	sbiw	r24, 0x00	; 0
 b6c:	61 05       	cpc	r22, r1
 b6e:	71 05       	cpc	r23, r1
 b70:	08 95       	ret
 b72:	9b 01       	movw	r18, r22
 b74:	ac 01       	movw	r20, r24
 b76:	0a 2e       	mov	r0, r26
 b78:	06 94       	lsr	r0
 b7a:	57 95       	ror	r21
 b7c:	47 95       	ror	r20
 b7e:	37 95       	ror	r19
 b80:	27 95       	ror	r18
 b82:	ba 95       	dec	r27
 b84:	c9 f7       	brne	.-14     	; 0xb78 <__ultoa_invert+0xa2>
 b86:	62 0f       	add	r22, r18
 b88:	73 1f       	adc	r23, r19
 b8a:	84 1f       	adc	r24, r20
 b8c:	95 1f       	adc	r25, r21
 b8e:	a0 1d       	adc	r26, r0
 b90:	08 95       	ret

00000b92 <__prologue_saves__>:
 b92:	2f 92       	push	r2
 b94:	3f 92       	push	r3
 b96:	4f 92       	push	r4
 b98:	5f 92       	push	r5
 b9a:	6f 92       	push	r6
 b9c:	7f 92       	push	r7
 b9e:	8f 92       	push	r8
 ba0:	9f 92       	push	r9
 ba2:	af 92       	push	r10
 ba4:	bf 92       	push	r11
 ba6:	cf 92       	push	r12
 ba8:	df 92       	push	r13
 baa:	ef 92       	push	r14
 bac:	ff 92       	push	r15
 bae:	0f 93       	push	r16
 bb0:	1f 93       	push	r17
 bb2:	cf 93       	push	r28
 bb4:	df 93       	push	r29
 bb6:	cd b7       	in	r28, 0x3d	; 61
 bb8:	de b7       	in	r29, 0x3e	; 62
 bba:	ca 1b       	sub	r28, r26
 bbc:	db 0b       	sbc	r29, r27
 bbe:	0f b6       	in	r0, 0x3f	; 63
 bc0:	f8 94       	cli
 bc2:	de bf       	out	0x3e, r29	; 62
 bc4:	0f be       	out	0x3f, r0	; 63
 bc6:	cd bf       	out	0x3d, r28	; 61
 bc8:	09 94       	ijmp

00000bca <__epilogue_restores__>:
 bca:	2a 88       	ldd	r2, Y+18	; 0x12
 bcc:	39 88       	ldd	r3, Y+17	; 0x11
 bce:	48 88       	ldd	r4, Y+16	; 0x10
 bd0:	5f 84       	ldd	r5, Y+15	; 0x0f
 bd2:	6e 84       	ldd	r6, Y+14	; 0x0e
 bd4:	7d 84       	ldd	r7, Y+13	; 0x0d
 bd6:	8c 84       	ldd	r8, Y+12	; 0x0c
 bd8:	9b 84       	ldd	r9, Y+11	; 0x0b
 bda:	aa 84       	ldd	r10, Y+10	; 0x0a
 bdc:	b9 84       	ldd	r11, Y+9	; 0x09
 bde:	c8 84       	ldd	r12, Y+8	; 0x08
 be0:	df 80       	ldd	r13, Y+7	; 0x07
 be2:	ee 80       	ldd	r14, Y+6	; 0x06
 be4:	fd 80       	ldd	r15, Y+5	; 0x05
 be6:	0c 81       	ldd	r16, Y+4	; 0x04
 be8:	1b 81       	ldd	r17, Y+3	; 0x03
 bea:	aa 81       	ldd	r26, Y+2	; 0x02
 bec:	b9 81       	ldd	r27, Y+1	; 0x01
 bee:	ce 0f       	add	r28, r30
 bf0:	d1 1d       	adc	r29, r1
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	f8 94       	cli
 bf6:	de bf       	out	0x3e, r29	; 62
 bf8:	0f be       	out	0x3f, r0	; 63
 bfa:	cd bf       	out	0x3d, r28	; 61
 bfc:	ed 01       	movw	r28, r26
 bfe:	08 95       	ret

00000c00 <_exit>:
 c00:	f8 94       	cli

00000c02 <__stop_program>:
 c02:	ff cf       	rjmp	.-2      	; 0xc02 <__stop_program>
