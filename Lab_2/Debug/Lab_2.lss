
Lab_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000aec  00000b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800134  00800134  00000bb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e5  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a17  00000000  00000000  00001e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a0  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  000030dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000549  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061d  00000000  00000000  000037ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 34       	cpi	r26, 0x4A	; 74
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  9e:	0c 94 74 05 	jmp	0xae8	; 0xae8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include <stdlib.h>
#include <util/delay.h>

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Habilitar ADC y configurar preescalador a 128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	// Espera a que la conversión termine
	while(ADCSRA & (1<<ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC_Read+0x18>
	// Devuelve el resultado de la conversión
	return ADC;
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  dc:	08 95       	ret

000000de <ADC_Read_Multiple>:

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	6c 01       	movw	r12, r24
  f0:	7b 01       	movw	r14, r22
  f2:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < num_channels; i++) {
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	11 c0       	rjmp	.+34     	; 0x11a <ADC_Read_Multiple+0x3c>
		results[i] = ADC_Read(channels[i]);
  f8:	8c 2f       	mov	r24, r28
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	8c 01       	movw	r16, r24
  fe:	00 0f       	add	r16, r16
 100:	11 1f       	adc	r17, r17
 102:	0e 0d       	add	r16, r14
 104:	1f 1d       	adc	r17, r15
 106:	f6 01       	movw	r30, r12
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	80 81       	ld	r24, Z
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Read>
 112:	f8 01       	movw	r30, r16
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
	// Devuelve el resultado de la conversión
	return ADC;
}

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
	for (uint8_t i = 0; i < num_channels; i++) {
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	cd 17       	cp	r28, r29
 11c:	68 f3       	brcs	.-38     	; 0xf8 <ADC_Read_Multiple+0x1a>
		results[i] = ADC_Read(channels[i]);
	}
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	08 95       	ret

00000130 <Lcd_Port>:
	Lcd_Cmd(0x06);          // Modo de incremento
}

void Lcd_Clear()
{
	Lcd_Cmd(1);  // Comando para limpiar el display
 130:	80 ff       	sbrs	r24, 0
 132:	04 c0       	rjmp	.+8      	; 0x13c <Lcd_Port+0xc>
 134:	95 b1       	in	r25, 0x05	; 5
 136:	98 60       	ori	r25, 0x08	; 8
 138:	95 b9       	out	0x05, r25	; 5
 13a:	03 c0       	rjmp	.+6      	; 0x142 <Lcd_Port+0x12>
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	97 7f       	andi	r25, 0xF7	; 247
 140:	95 b9       	out	0x05, r25	; 5
 142:	81 ff       	sbrs	r24, 1
 144:	04 c0       	rjmp	.+8      	; 0x14e <Lcd_Port+0x1e>
 146:	95 b1       	in	r25, 0x05	; 5
 148:	94 60       	ori	r25, 0x04	; 4
 14a:	95 b9       	out	0x05, r25	; 5
 14c:	03 c0       	rjmp	.+6      	; 0x154 <Lcd_Port+0x24>
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	9b 7f       	andi	r25, 0xFB	; 251
 152:	95 b9       	out	0x05, r25	; 5
 154:	82 ff       	sbrs	r24, 2
 156:	04 c0       	rjmp	.+8      	; 0x160 <Lcd_Port+0x30>
 158:	9b b1       	in	r25, 0x0b	; 11
 15a:	94 60       	ori	r25, 0x04	; 4
 15c:	9b b9       	out	0x0b, r25	; 11
 15e:	03 c0       	rjmp	.+6      	; 0x166 <Lcd_Port+0x36>
 160:	9b b1       	in	r25, 0x0b	; 11
 162:	9b 7f       	andi	r25, 0xFB	; 251
 164:	9b b9       	out	0x0b, r25	; 11
 166:	83 ff       	sbrs	r24, 3
 168:	04 c0       	rjmp	.+8      	; 0x172 <Lcd_Port+0x42>
 16a:	9b b1       	in	r25, 0x0b	; 11
 16c:	98 60       	ori	r25, 0x08	; 8
 16e:	9b b9       	out	0x0b, r25	; 11
 170:	03 c0       	rjmp	.+6      	; 0x178 <Lcd_Port+0x48>
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	97 7f       	andi	r25, 0xF7	; 247
 176:	9b b9       	out	0x0b, r25	; 11
 178:	84 ff       	sbrs	r24, 4
 17a:	04 c0       	rjmp	.+8      	; 0x184 <Lcd_Port+0x54>
 17c:	9b b1       	in	r25, 0x0b	; 11
 17e:	90 61       	ori	r25, 0x10	; 16
 180:	9b b9       	out	0x0b, r25	; 11
 182:	03 c0       	rjmp	.+6      	; 0x18a <Lcd_Port+0x5a>
 184:	9b b1       	in	r25, 0x0b	; 11
 186:	9f 7e       	andi	r25, 0xEF	; 239
 188:	9b b9       	out	0x0b, r25	; 11
 18a:	85 ff       	sbrs	r24, 5
 18c:	04 c0       	rjmp	.+8      	; 0x196 <Lcd_Port+0x66>
 18e:	9b b1       	in	r25, 0x0b	; 11
 190:	90 62       	ori	r25, 0x20	; 32
 192:	9b b9       	out	0x0b, r25	; 11
 194:	03 c0       	rjmp	.+6      	; 0x19c <Lcd_Port+0x6c>
 196:	9b b1       	in	r25, 0x0b	; 11
 198:	9f 7d       	andi	r25, 0xDF	; 223
 19a:	9b b9       	out	0x0b, r25	; 11
 19c:	86 ff       	sbrs	r24, 6
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <Lcd_Port+0x78>
 1a0:	9b b1       	in	r25, 0x0b	; 11
 1a2:	90 64       	ori	r25, 0x40	; 64
 1a4:	9b b9       	out	0x0b, r25	; 11
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <Lcd_Port+0x7e>
 1a8:	9b b1       	in	r25, 0x0b	; 11
 1aa:	9f 7b       	andi	r25, 0xBF	; 191
 1ac:	9b b9       	out	0x0b, r25	; 11
 1ae:	88 23       	and	r24, r24
 1b0:	24 f4       	brge	.+8      	; 0x1ba <Lcd_Port+0x8a>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	08 95       	ret
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 77       	andi	r24, 0x7F	; 127
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	08 95       	ret

000001c2 <Lcd_Cmd>:
 1c2:	95 b1       	in	r25, 0x05	; 5
 1c4:	9d 7f       	andi	r25, 0xFD	; 253
 1c6:	95 b9       	out	0x05, r25	; 5
 1c8:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Port>
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	8f e9       	ldi	r24, 0x9F	; 159
 1d4:	9f e0       	ldi	r25, 0x0F	; 15
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Lcd_Cmd+0x14>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <Lcd_Cmd+0x1a>
 1dc:	00 00       	nop
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	8f e9       	ldi	r24, 0x9F	; 159
 1e6:	9f e0       	ldi	r25, 0x0F	; 15
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <Lcd_Cmd+0x26>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <Lcd_Cmd+0x2c>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <Lcd_InitLCD8bits>:
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	8d 7f       	andi	r24, 0xFD	; 253
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8e 7f       	andi	r24, 0xFE	; 254
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	89 ef       	ldi	r24, 0xF9	; 249
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <Lcd_InitLCD8bits+0x12>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <Lcd_InitLCD8bits+0x1c>
 20e:	00 00       	nop
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 216:	8f e1       	ldi	r24, 0x1F	; 31
 218:	9e e4       	ldi	r25, 0x4E	; 78
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <Lcd_InitLCD8bits+0x28>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <Lcd_InitLCD8bits+0x2e>
 220:	00 00       	nop
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 228:	8f e9       	ldi	r24, 0x9F	; 159
 22a:	9f e0       	ldi	r25, 0x0F	; 15
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <Lcd_InitLCD8bits+0x3a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <Lcd_InitLCD8bits+0x40>
 232:	00 00       	nop
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	9c e9       	ldi	r25, 0x9C	; 156
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <Lcd_InitLCD8bits+0x4c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <Lcd_InitLCD8bits+0x52>
 244:	00 00       	nop
 246:	88 e3       	ldi	r24, 0x38	; 56
 248:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 24c:	8c e0       	ldi	r24, 0x0C	; 12
 24e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 25e:	08 95       	ret

00000260 <Lcd_Set_Cursor>:
}

void Lcd_Set_Cursor(char a, char b)
{
	if(a == 1)
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	29 f4       	brne	.+10     	; 0x26e <Lcd_Set_Cursor+0xe>
	Lcd_Cmd(0x80 + b);  // Posicionar cursor en la fila 1
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	86 0f       	add	r24, r22
 268:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 26c:	08 95       	ret
	else if(a == 2)
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	21 f4       	brne	.+8      	; 0x27a <Lcd_Set_Cursor+0x1a>
	Lcd_Cmd(0xC0 + b);  // Posicionar cursor en la fila 2
 272:	80 ec       	ldi	r24, 0xC0	; 192
 274:	86 0f       	add	r24, r22
 276:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd>
 27a:	08 95       	ret

0000027c <Lcd_Write_Char>:
}

void Lcd_Write_Char(char a)
{
	PORTB |= (1<<PORTB1);   // RS = 1 (dato)
 27c:	95 b1       	in	r25, 0x05	; 5
 27e:	92 60       	ori	r25, 0x02	; 2
 280:	95 b9       	out	0x05, r25	; 5
	Lcd_Port(a);            // Transferir datos
 282:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Port>
	PORTB |= (1<<PORTB0);   // E = 1
 286:	85 b1       	in	r24, 0x05	; 5
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	8f e9       	ldi	r24, 0x9F	; 159
 28e:	9f e0       	ldi	r25, 0x0F	; 15
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <Lcd_Write_Char+0x14>
 294:	00 c0       	rjmp	.+0      	; 0x296 <Lcd_Write_Char+0x1a>
 296:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB0);  // E = 0
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	85 b9       	out	0x05, r24	; 5
 29e:	8f e9       	ldi	r24, 0x9F	; 159
 2a0:	9f e0       	ldi	r25, 0x0F	; 15
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <Lcd_Write_Char+0x26>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <Lcd_Write_Char+0x2c>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <Lcd_Write_String>:
	_delay_ms(1);
}

void Lcd_Write_String(char *a)
{
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i] != '\0'; i++)
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);  // Escribir cada caracter de la cadena
 2bc:	0e 94 3e 01 	call	0x27c	; 0x27c <Lcd_Write_Char>
}

void Lcd_Write_String(char *a)
{
	int i;
	for(i=0; a[i] != '\0'; i++)
 2c0:	21 96       	adiw	r28, 0x01	; 1
 2c2:	f8 01       	movw	r30, r16
 2c4:	ec 0f       	add	r30, r28
 2c6:	fd 1f       	adc	r31, r29
 2c8:	80 81       	ld	r24, Z
 2ca:	81 11       	cpse	r24, r1
 2cc:	f7 cf       	rjmp	.-18     	; 0x2bc <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);  // Escribir cada caracter de la cadena
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	08 95       	ret

000002d8 <main>:
////////////////////////////////////////////////////
// Programa Principal
////////////////////////////////////////////////////

int main(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <main+0x6>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	// Configuración de puertos y periféricos
	DDRD = 0xFF;  // Configura todos los pines del puerto D como salidas
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x03;  // Configura los primeros dos pines del puerto B como salidas
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	84 b9       	out	0x04, r24	; 4
	Lcd_InitLCD8bits();  // Inicializa el LCD en modo de 8 bits
 2ea:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Lcd_InitLCD8bits>
	ADC_Init();  // Inicializa el ADC
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	UART_Init(BAUD);  // Inicializa la UART
 2f2:	60 e8       	ldi	r22, 0x80	; 128
 2f4:	75 e2       	ldi	r23, 0x25	; 37
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 2a 02 	call	0x454	; 0x454 <UART_Init>

	uint8_t adc_channels[] = {7, 6};  // Canales ADC a leer (ADC7 y ADC6)
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	8a 83       	std	Y+2, r24	; 0x02

	// Configuración inicial del LCD
	Lcd_Set_Cursor(1, 0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 30 01 	call	0x260	; 0x260 <Lcd_Set_Cursor>
	Lcd_Write_String("S1:   S2:   S3:");
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lcd_Write_String>

	while (1)
	{
		// Leer los valores de los ADC
		ADC_Read_Multiple(adc_channels, adc_results, 2);
 316:	42 e0       	ldi	r20, 0x02	; 2
 318:	66 e4       	ldi	r22, 0x46	; 70
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	0e 94 6f 00 	call	0xde	; 0xde <ADC_Read_Multiple>

		// Mostrar los valores en el LCD
		Lcd_Set_Cursor(2, 0);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 30 01 	call	0x260	; 0x260 <Lcd_Set_Cursor>
		snprintf(buffer, sizeof(buffer), "%4uV", adc_results[1]);
 32c:	0f 2e       	mov	r0, r31
 32e:	f6 e4       	ldi	r31, 0x46	; 70
 330:	ef 2e       	mov	r14, r31
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	ff 2e       	mov	r15, r31
 336:	f0 2d       	mov	r31, r0
 338:	f7 01       	movw	r30, r14
 33a:	83 81       	ldd	r24, Z+3	; 0x03
 33c:	8f 93       	push	r24
 33e:	82 81       	ldd	r24, Z+2	; 0x02
 340:	8f 93       	push	r24
 342:	0f 2e       	mov	r0, r31
 344:	f0 e1       	ldi	r31, 0x10	; 16
 346:	af 2e       	mov	r10, r31
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	bf 2e       	mov	r11, r31
 34c:	f0 2d       	mov	r31, r0
 34e:	bf 92       	push	r11
 350:	af 92       	push	r10
 352:	1f 92       	push	r1
 354:	68 94       	set
 356:	dd 24       	eor	r13, r13
 358:	d4 f8       	bld	r13, 4
 35a:	df 92       	push	r13
 35c:	06 e3       	ldi	r16, 0x36	; 54
 35e:	11 e0       	ldi	r17, 0x01	; 1
 360:	1f 93       	push	r17
 362:	0f 93       	push	r16
 364:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <snprintf>
		Lcd_Write_String(buffer);
 368:	c8 01       	movw	r24, r16
 36a:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lcd_Write_String>
		
		snprintf(buffer, sizeof(buffer), "%4uV", adc_results[0]);
 36e:	f7 01       	movw	r30, r14
 370:	81 81       	ldd	r24, Z+1	; 0x01
 372:	8f 93       	push	r24
 374:	80 81       	ld	r24, Z
 376:	8f 93       	push	r24
 378:	bf 92       	push	r11
 37a:	af 92       	push	r10
 37c:	1f 92       	push	r1
 37e:	df 92       	push	r13
 380:	1f 93       	push	r17
 382:	0f 93       	push	r16
 384:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <snprintf>
		Lcd_Set_Cursor(2, 6);
 388:	66 e0       	ldi	r22, 0x06	; 6
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 30 01 	call	0x260	; 0x260 <Lcd_Set_Cursor>
		Lcd_Write_String(buffer);
 390:	c8 01       	movw	r24, r16
 392:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lcd_Write_String>

		snprintf(buffer, sizeof(buffer), "%4d", counter);
 396:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <__data_end+0x1>
 39a:	8f 93       	push	r24
 39c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 3a0:	8f 93       	push	r24
 3a2:	85 e1       	ldi	r24, 0x15	; 21
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	9f 93       	push	r25
 3a8:	8f 93       	push	r24
 3aa:	1f 92       	push	r1
 3ac:	df 92       	push	r13
 3ae:	1f 93       	push	r17
 3b0:	0f 93       	push	r16
 3b2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <snprintf>
		Lcd_Set_Cursor(2, 11);
 3b6:	6b e0       	ldi	r22, 0x0B	; 11
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 30 01 	call	0x260	; 0x260 <Lcd_Set_Cursor>
		Lcd_Write_String(buffer);
 3be:	c8 01       	movw	r24, r16
 3c0:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lcd_Write_String>
		
		// Enviar los valores de los ADC y el contador a través de UART
		snprintf(buffer, sizeof(buffer), "ADC6:%u,ADC7:%u,Count:%d\r\n", adc_results[1], adc_results[0], counter);
 3c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <__data_end+0x1>
 3c8:	8f 93       	push	r24
 3ca:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 3ce:	8f 93       	push	r24
 3d0:	f7 01       	movw	r30, r14
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	8f 93       	push	r24
 3d6:	80 81       	ld	r24, Z
 3d8:	8f 93       	push	r24
 3da:	83 81       	ldd	r24, Z+3	; 0x03
 3dc:	8f 93       	push	r24
 3de:	82 81       	ldd	r24, Z+2	; 0x02
 3e0:	8f 93       	push	r24
 3e2:	89 e1       	ldi	r24, 0x19	; 25
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	9f 93       	push	r25
 3e8:	8f 93       	push	r24
 3ea:	1f 92       	push	r1
 3ec:	df 92       	push	r13
 3ee:	1f 93       	push	r17
 3f0:	0f 93       	push	r16
 3f2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <snprintf>
		UART_TransmitString(buffer);
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	c8 01       	movw	r24, r16
 402:	0e 94 4d 02 	call	0x49a	; 0x49a <UART_TransmitString>
		
		// Leer y procesar los comandos de la UART
		if (UCSR0A & (1 << RXC0)) {  // Verificar si hay datos disponibles en el buffer de recepción
 406:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 40a:	88 23       	and	r24, r24
 40c:	cc f4       	brge	.+50     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			unsigned char received_char = UART_Receive();
 40e:	0e 94 46 02 	call	0x48c	; 0x48c <UART_Receive>
			if (received_char == '+') {
 412:	8b 32       	cpi	r24, 0x2B	; 43
 414:	51 f4       	brne	.+20     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
				counter++;  // Incrementar el contador
 416:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 41a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
 424:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
 428:	0b c0       	rjmp	.+22     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				} else if (received_char == '-') {
 42a:	8d 32       	cpi	r24, 0x2D	; 45
 42c:	49 f4       	brne	.+18     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				counter--;  // Decrementar el contador
 42e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 432:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
 43c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
 440:	9f ef       	ldi	r25, 0xFF	; 255
 442:	e9 e6       	ldi	r30, 0x69	; 105
 444:	f8 e1       	ldi	r31, 0x18	; 24
 446:	91 50       	subi	r25, 0x01	; 1
 448:	e0 40       	sbci	r30, 0x00	; 0
 44a:	f0 40       	sbci	r31, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	00 00       	nop
 452:	61 cf       	rjmp	.-318    	; 0x316 <main+0x3e>

00000454 <UART_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
#include "UART.h"

void UART_Init(unsigned long baud_rate) {
 454:	9b 01       	movw	r18, r22
 456:	ac 01       	movw	r20, r24
	unsigned int ubrr = F_CPU / 16 / baud_rate - 1;
 458:	60 e4       	ldi	r22, 0x40	; 64
 45a:	72 e4       	ldi	r23, 0x42	; 66
 45c:	8f e0       	ldi	r24, 0x0F	; 15
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodsi4>
 464:	21 50       	subi	r18, 0x01	; 1
 466:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 468:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 46c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar el receptor y el transmisor
 470:	88 e1       	ldi	r24, 0x18	; 24
 472:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar el formato de datos: 8 bits
 476:	86 e0       	ldi	r24, 0x06	; 6
 478:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 47c:	08 95       	ret

0000047e <UART_Transmit>:
}

void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer de transmisión esté vacío
 47e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 482:	95 ff       	sbrs	r25, 5
 484:	fc cf       	rjmp	.-8      	; 0x47e <UART_Transmit>
	UDR0 = data;  // Enviar el dato
 486:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 48a:	08 95       	ret

0000048c <UART_Receive>:
}

unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
 48c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 490:	88 23       	and	r24, r24
 492:	e4 f7       	brge	.-8      	; 0x48c <UART_Receive>
	return UDR0;  // Leer el dato recibido
 494:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 498:	08 95       	ret

0000049a <UART_TransmitString>:

void UART_TransmitString(const char *str) {
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	ec 01       	movw	r28, r24
	while (*str) {
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <UART_TransmitString+0xe>
		UART_Transmit(*str++);
 4a2:	21 96       	adiw	r28, 0x01	; 1
 4a4:	0e 94 3f 02 	call	0x47e	; 0x47e <UART_Transmit>
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
	return UDR0;  // Leer el dato recibido
}

void UART_TransmitString(const char *str) {
	while (*str) {
 4a8:	88 81       	ld	r24, Y
 4aa:	81 11       	cpse	r24, r1
 4ac:	fa cf       	rjmp	.-12     	; 0x4a2 <UART_TransmitString+0x8>
		UART_Transmit(*str++);
	}
}
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <__udivmodsi4>:
 4b4:	a1 e2       	ldi	r26, 0x21	; 33
 4b6:	1a 2e       	mov	r1, r26
 4b8:	aa 1b       	sub	r26, r26
 4ba:	bb 1b       	sub	r27, r27
 4bc:	fd 01       	movw	r30, r26
 4be:	0d c0       	rjmp	.+26     	; 0x4da <__udivmodsi4_ep>

000004c0 <__udivmodsi4_loop>:
 4c0:	aa 1f       	adc	r26, r26
 4c2:	bb 1f       	adc	r27, r27
 4c4:	ee 1f       	adc	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	a2 17       	cp	r26, r18
 4ca:	b3 07       	cpc	r27, r19
 4cc:	e4 07       	cpc	r30, r20
 4ce:	f5 07       	cpc	r31, r21
 4d0:	20 f0       	brcs	.+8      	; 0x4da <__udivmodsi4_ep>
 4d2:	a2 1b       	sub	r26, r18
 4d4:	b3 0b       	sbc	r27, r19
 4d6:	e4 0b       	sbc	r30, r20
 4d8:	f5 0b       	sbc	r31, r21

000004da <__udivmodsi4_ep>:
 4da:	66 1f       	adc	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	88 1f       	adc	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	1a 94       	dec	r1
 4e4:	69 f7       	brne	.-38     	; 0x4c0 <__udivmodsi4_loop>
 4e6:	60 95       	com	r22
 4e8:	70 95       	com	r23
 4ea:	80 95       	com	r24
 4ec:	90 95       	com	r25
 4ee:	9b 01       	movw	r18, r22
 4f0:	ac 01       	movw	r20, r24
 4f2:	bd 01       	movw	r22, r26
 4f4:	cf 01       	movw	r24, r30
 4f6:	08 95       	ret

000004f8 <snprintf>:
 4f8:	ae e0       	ldi	r26, 0x0E	; 14
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e2 e8       	ldi	r30, 0x82	; 130
 4fe:	f2 e0       	ldi	r31, 0x02	; 2
 500:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__prologue_saves__+0x1c>
 504:	0d 89       	ldd	r16, Y+21	; 0x15
 506:	1e 89       	ldd	r17, Y+22	; 0x16
 508:	8f 89       	ldd	r24, Y+23	; 0x17
 50a:	98 8d       	ldd	r25, Y+24	; 0x18
 50c:	26 e0       	ldi	r18, 0x06	; 6
 50e:	2c 83       	std	Y+4, r18	; 0x04
 510:	1a 83       	std	Y+2, r17	; 0x02
 512:	09 83       	std	Y+1, r16	; 0x01
 514:	97 ff       	sbrs	r25, 7
 516:	02 c0       	rjmp	.+4      	; 0x51c <snprintf+0x24>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e8       	ldi	r25, 0x80	; 128
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	9e 83       	std	Y+6, r25	; 0x06
 520:	8d 83       	std	Y+5, r24	; 0x05
 522:	ae 01       	movw	r20, r28
 524:	45 5e       	subi	r20, 0xE5	; 229
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	69 8d       	ldd	r22, Y+25	; 0x19
 52a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	0e 94 ac 02 	call	0x558	; 0x558 <vfprintf>
 534:	4d 81       	ldd	r20, Y+5	; 0x05
 536:	5e 81       	ldd	r21, Y+6	; 0x06
 538:	57 fd       	sbrc	r21, 7
 53a:	0a c0       	rjmp	.+20     	; 0x550 <snprintf+0x58>
 53c:	2f 81       	ldd	r18, Y+7	; 0x07
 53e:	38 85       	ldd	r19, Y+8	; 0x08
 540:	42 17       	cp	r20, r18
 542:	53 07       	cpc	r21, r19
 544:	0c f4       	brge	.+2      	; 0x548 <snprintf+0x50>
 546:	9a 01       	movw	r18, r20
 548:	f8 01       	movw	r30, r16
 54a:	e2 0f       	add	r30, r18
 54c:	f3 1f       	adc	r31, r19
 54e:	10 82       	st	Z, r1
 550:	2e 96       	adiw	r28, 0x0e	; 14
 552:	e4 e0       	ldi	r30, 0x04	; 4
 554:	0c 94 67 05 	jmp	0xace	; 0xace <__epilogue_restores__+0x1c>

00000558 <vfprintf>:
 558:	ab e0       	ldi	r26, 0x0B	; 11
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e2 eb       	ldi	r30, 0xB2	; 178
 55e:	f2 e0       	ldi	r31, 0x02	; 2
 560:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__prologue_saves__>
 564:	6c 01       	movw	r12, r24
 566:	7b 01       	movw	r14, r22
 568:	8a 01       	movw	r16, r20
 56a:	fc 01       	movw	r30, r24
 56c:	17 82       	std	Z+7, r1	; 0x07
 56e:	16 82       	std	Z+6, r1	; 0x06
 570:	83 81       	ldd	r24, Z+3	; 0x03
 572:	81 ff       	sbrs	r24, 1
 574:	cc c1       	rjmp	.+920    	; 0x90e <__stack+0xf>
 576:	ce 01       	movw	r24, r28
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	3c 01       	movw	r6, r24
 57c:	f6 01       	movw	r30, r12
 57e:	93 81       	ldd	r25, Z+3	; 0x03
 580:	f7 01       	movw	r30, r14
 582:	93 fd       	sbrc	r25, 3
 584:	85 91       	lpm	r24, Z+
 586:	93 ff       	sbrs	r25, 3
 588:	81 91       	ld	r24, Z+
 58a:	7f 01       	movw	r14, r30
 58c:	88 23       	and	r24, r24
 58e:	09 f4       	brne	.+2      	; 0x592 <vfprintf+0x3a>
 590:	ba c1       	rjmp	.+884    	; 0x906 <__stack+0x7>
 592:	85 32       	cpi	r24, 0x25	; 37
 594:	39 f4       	brne	.+14     	; 0x5a4 <vfprintf+0x4c>
 596:	93 fd       	sbrc	r25, 3
 598:	85 91       	lpm	r24, Z+
 59a:	93 ff       	sbrs	r25, 3
 59c:	81 91       	ld	r24, Z+
 59e:	7f 01       	movw	r14, r30
 5a0:	85 32       	cpi	r24, 0x25	; 37
 5a2:	29 f4       	brne	.+10     	; 0x5ae <vfprintf+0x56>
 5a4:	b6 01       	movw	r22, r12
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 5ac:	e7 cf       	rjmp	.-50     	; 0x57c <vfprintf+0x24>
 5ae:	91 2c       	mov	r9, r1
 5b0:	21 2c       	mov	r2, r1
 5b2:	31 2c       	mov	r3, r1
 5b4:	ff e1       	ldi	r31, 0x1F	; 31
 5b6:	f3 15       	cp	r31, r3
 5b8:	d8 f0       	brcs	.+54     	; 0x5f0 <vfprintf+0x98>
 5ba:	8b 32       	cpi	r24, 0x2B	; 43
 5bc:	79 f0       	breq	.+30     	; 0x5dc <vfprintf+0x84>
 5be:	38 f4       	brcc	.+14     	; 0x5ce <vfprintf+0x76>
 5c0:	80 32       	cpi	r24, 0x20	; 32
 5c2:	79 f0       	breq	.+30     	; 0x5e2 <vfprintf+0x8a>
 5c4:	83 32       	cpi	r24, 0x23	; 35
 5c6:	a1 f4       	brne	.+40     	; 0x5f0 <vfprintf+0x98>
 5c8:	23 2d       	mov	r18, r3
 5ca:	20 61       	ori	r18, 0x10	; 16
 5cc:	1d c0       	rjmp	.+58     	; 0x608 <vfprintf+0xb0>
 5ce:	8d 32       	cpi	r24, 0x2D	; 45
 5d0:	61 f0       	breq	.+24     	; 0x5ea <vfprintf+0x92>
 5d2:	80 33       	cpi	r24, 0x30	; 48
 5d4:	69 f4       	brne	.+26     	; 0x5f0 <vfprintf+0x98>
 5d6:	23 2d       	mov	r18, r3
 5d8:	21 60       	ori	r18, 0x01	; 1
 5da:	16 c0       	rjmp	.+44     	; 0x608 <vfprintf+0xb0>
 5dc:	83 2d       	mov	r24, r3
 5de:	82 60       	ori	r24, 0x02	; 2
 5e0:	38 2e       	mov	r3, r24
 5e2:	e3 2d       	mov	r30, r3
 5e4:	e4 60       	ori	r30, 0x04	; 4
 5e6:	3e 2e       	mov	r3, r30
 5e8:	2a c0       	rjmp	.+84     	; 0x63e <vfprintf+0xe6>
 5ea:	f3 2d       	mov	r31, r3
 5ec:	f8 60       	ori	r31, 0x08	; 8
 5ee:	1d c0       	rjmp	.+58     	; 0x62a <vfprintf+0xd2>
 5f0:	37 fc       	sbrc	r3, 7
 5f2:	2d c0       	rjmp	.+90     	; 0x64e <vfprintf+0xf6>
 5f4:	20 ed       	ldi	r18, 0xD0	; 208
 5f6:	28 0f       	add	r18, r24
 5f8:	2a 30       	cpi	r18, 0x0A	; 10
 5fa:	40 f0       	brcs	.+16     	; 0x60c <vfprintf+0xb4>
 5fc:	8e 32       	cpi	r24, 0x2E	; 46
 5fe:	b9 f4       	brne	.+46     	; 0x62e <vfprintf+0xd6>
 600:	36 fc       	sbrc	r3, 6
 602:	81 c1       	rjmp	.+770    	; 0x906 <__stack+0x7>
 604:	23 2d       	mov	r18, r3
 606:	20 64       	ori	r18, 0x40	; 64
 608:	32 2e       	mov	r3, r18
 60a:	19 c0       	rjmp	.+50     	; 0x63e <vfprintf+0xe6>
 60c:	36 fe       	sbrs	r3, 6
 60e:	06 c0       	rjmp	.+12     	; 0x61c <vfprintf+0xc4>
 610:	8a e0       	ldi	r24, 0x0A	; 10
 612:	98 9e       	mul	r9, r24
 614:	20 0d       	add	r18, r0
 616:	11 24       	eor	r1, r1
 618:	92 2e       	mov	r9, r18
 61a:	11 c0       	rjmp	.+34     	; 0x63e <vfprintf+0xe6>
 61c:	ea e0       	ldi	r30, 0x0A	; 10
 61e:	2e 9e       	mul	r2, r30
 620:	20 0d       	add	r18, r0
 622:	11 24       	eor	r1, r1
 624:	22 2e       	mov	r2, r18
 626:	f3 2d       	mov	r31, r3
 628:	f0 62       	ori	r31, 0x20	; 32
 62a:	3f 2e       	mov	r3, r31
 62c:	08 c0       	rjmp	.+16     	; 0x63e <vfprintf+0xe6>
 62e:	8c 36       	cpi	r24, 0x6C	; 108
 630:	21 f4       	brne	.+8      	; 0x63a <vfprintf+0xe2>
 632:	83 2d       	mov	r24, r3
 634:	80 68       	ori	r24, 0x80	; 128
 636:	38 2e       	mov	r3, r24
 638:	02 c0       	rjmp	.+4      	; 0x63e <vfprintf+0xe6>
 63a:	88 36       	cpi	r24, 0x68	; 104
 63c:	41 f4       	brne	.+16     	; 0x64e <vfprintf+0xf6>
 63e:	f7 01       	movw	r30, r14
 640:	93 fd       	sbrc	r25, 3
 642:	85 91       	lpm	r24, Z+
 644:	93 ff       	sbrs	r25, 3
 646:	81 91       	ld	r24, Z+
 648:	7f 01       	movw	r14, r30
 64a:	81 11       	cpse	r24, r1
 64c:	b3 cf       	rjmp	.-154    	; 0x5b4 <vfprintf+0x5c>
 64e:	98 2f       	mov	r25, r24
 650:	9f 7d       	andi	r25, 0xDF	; 223
 652:	95 54       	subi	r25, 0x45	; 69
 654:	93 30       	cpi	r25, 0x03	; 3
 656:	28 f4       	brcc	.+10     	; 0x662 <vfprintf+0x10a>
 658:	0c 5f       	subi	r16, 0xFC	; 252
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	9f e3       	ldi	r25, 0x3F	; 63
 65e:	99 83       	std	Y+1, r25	; 0x01
 660:	0d c0       	rjmp	.+26     	; 0x67c <vfprintf+0x124>
 662:	83 36       	cpi	r24, 0x63	; 99
 664:	31 f0       	breq	.+12     	; 0x672 <vfprintf+0x11a>
 666:	83 37       	cpi	r24, 0x73	; 115
 668:	71 f0       	breq	.+28     	; 0x686 <vfprintf+0x12e>
 66a:	83 35       	cpi	r24, 0x53	; 83
 66c:	09 f0       	breq	.+2      	; 0x670 <vfprintf+0x118>
 66e:	59 c0       	rjmp	.+178    	; 0x722 <vfprintf+0x1ca>
 670:	21 c0       	rjmp	.+66     	; 0x6b4 <vfprintf+0x15c>
 672:	f8 01       	movw	r30, r16
 674:	80 81       	ld	r24, Z
 676:	89 83       	std	Y+1, r24	; 0x01
 678:	0e 5f       	subi	r16, 0xFE	; 254
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	88 24       	eor	r8, r8
 67e:	83 94       	inc	r8
 680:	91 2c       	mov	r9, r1
 682:	53 01       	movw	r10, r6
 684:	13 c0       	rjmp	.+38     	; 0x6ac <vfprintf+0x154>
 686:	28 01       	movw	r4, r16
 688:	f2 e0       	ldi	r31, 0x02	; 2
 68a:	4f 0e       	add	r4, r31
 68c:	51 1c       	adc	r5, r1
 68e:	f8 01       	movw	r30, r16
 690:	a0 80       	ld	r10, Z
 692:	b1 80       	ldd	r11, Z+1	; 0x01
 694:	36 fe       	sbrs	r3, 6
 696:	03 c0       	rjmp	.+6      	; 0x69e <vfprintf+0x146>
 698:	69 2d       	mov	r22, r9
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <vfprintf+0x14a>
 69e:	6f ef       	ldi	r22, 0xFF	; 255
 6a0:	7f ef       	ldi	r23, 0xFF	; 255
 6a2:	c5 01       	movw	r24, r10
 6a4:	0e 94 98 04 	call	0x930	; 0x930 <strnlen>
 6a8:	4c 01       	movw	r8, r24
 6aa:	82 01       	movw	r16, r4
 6ac:	f3 2d       	mov	r31, r3
 6ae:	ff 77       	andi	r31, 0x7F	; 127
 6b0:	3f 2e       	mov	r3, r31
 6b2:	16 c0       	rjmp	.+44     	; 0x6e0 <vfprintf+0x188>
 6b4:	28 01       	movw	r4, r16
 6b6:	22 e0       	ldi	r18, 0x02	; 2
 6b8:	42 0e       	add	r4, r18
 6ba:	51 1c       	adc	r5, r1
 6bc:	f8 01       	movw	r30, r16
 6be:	a0 80       	ld	r10, Z
 6c0:	b1 80       	ldd	r11, Z+1	; 0x01
 6c2:	36 fe       	sbrs	r3, 6
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <vfprintf+0x174>
 6c6:	69 2d       	mov	r22, r9
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <vfprintf+0x178>
 6cc:	6f ef       	ldi	r22, 0xFF	; 255
 6ce:	7f ef       	ldi	r23, 0xFF	; 255
 6d0:	c5 01       	movw	r24, r10
 6d2:	0e 94 8d 04 	call	0x91a	; 0x91a <strnlen_P>
 6d6:	4c 01       	movw	r8, r24
 6d8:	f3 2d       	mov	r31, r3
 6da:	f0 68       	ori	r31, 0x80	; 128
 6dc:	3f 2e       	mov	r3, r31
 6de:	82 01       	movw	r16, r4
 6e0:	33 fc       	sbrc	r3, 3
 6e2:	1b c0       	rjmp	.+54     	; 0x71a <vfprintf+0x1c2>
 6e4:	82 2d       	mov	r24, r2
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	88 16       	cp	r8, r24
 6ea:	99 06       	cpc	r9, r25
 6ec:	b0 f4       	brcc	.+44     	; 0x71a <vfprintf+0x1c2>
 6ee:	b6 01       	movw	r22, r12
 6f0:	80 e2       	ldi	r24, 0x20	; 32
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 6f8:	2a 94       	dec	r2
 6fa:	f4 cf       	rjmp	.-24     	; 0x6e4 <vfprintf+0x18c>
 6fc:	f5 01       	movw	r30, r10
 6fe:	37 fc       	sbrc	r3, 7
 700:	85 91       	lpm	r24, Z+
 702:	37 fe       	sbrs	r3, 7
 704:	81 91       	ld	r24, Z+
 706:	5f 01       	movw	r10, r30
 708:	b6 01       	movw	r22, r12
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 710:	21 10       	cpse	r2, r1
 712:	2a 94       	dec	r2
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	82 1a       	sub	r8, r18
 718:	91 08       	sbc	r9, r1
 71a:	81 14       	cp	r8, r1
 71c:	91 04       	cpc	r9, r1
 71e:	71 f7       	brne	.-36     	; 0x6fc <vfprintf+0x1a4>
 720:	e8 c0       	rjmp	.+464    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 722:	84 36       	cpi	r24, 0x64	; 100
 724:	11 f0       	breq	.+4      	; 0x72a <vfprintf+0x1d2>
 726:	89 36       	cpi	r24, 0x69	; 105
 728:	41 f5       	brne	.+80     	; 0x77a <vfprintf+0x222>
 72a:	f8 01       	movw	r30, r16
 72c:	37 fe       	sbrs	r3, 7
 72e:	07 c0       	rjmp	.+14     	; 0x73e <vfprintf+0x1e6>
 730:	60 81       	ld	r22, Z
 732:	71 81       	ldd	r23, Z+1	; 0x01
 734:	82 81       	ldd	r24, Z+2	; 0x02
 736:	93 81       	ldd	r25, Z+3	; 0x03
 738:	0c 5f       	subi	r16, 0xFC	; 252
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	08 c0       	rjmp	.+16     	; 0x74e <vfprintf+0x1f6>
 73e:	60 81       	ld	r22, Z
 740:	71 81       	ldd	r23, Z+1	; 0x01
 742:	07 2e       	mov	r0, r23
 744:	00 0c       	add	r0, r0
 746:	88 0b       	sbc	r24, r24
 748:	99 0b       	sbc	r25, r25
 74a:	0e 5f       	subi	r16, 0xFE	; 254
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	f3 2d       	mov	r31, r3
 750:	ff 76       	andi	r31, 0x6F	; 111
 752:	3f 2e       	mov	r3, r31
 754:	97 ff       	sbrs	r25, 7
 756:	09 c0       	rjmp	.+18     	; 0x76a <vfprintf+0x212>
 758:	90 95       	com	r25
 75a:	80 95       	com	r24
 75c:	70 95       	com	r23
 75e:	61 95       	neg	r22
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	8f 4f       	sbci	r24, 0xFF	; 255
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	f0 68       	ori	r31, 0x80	; 128
 768:	3f 2e       	mov	r3, r31
 76a:	2a e0       	ldi	r18, 0x0A	; 10
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	a3 01       	movw	r20, r6
 770:	0e 94 df 04 	call	0x9be	; 0x9be <__ultoa_invert>
 774:	88 2e       	mov	r8, r24
 776:	86 18       	sub	r8, r6
 778:	45 c0       	rjmp	.+138    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 77a:	85 37       	cpi	r24, 0x75	; 117
 77c:	31 f4       	brne	.+12     	; 0x78a <vfprintf+0x232>
 77e:	23 2d       	mov	r18, r3
 780:	2f 7e       	andi	r18, 0xEF	; 239
 782:	b2 2e       	mov	r11, r18
 784:	2a e0       	ldi	r18, 0x0A	; 10
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	25 c0       	rjmp	.+74     	; 0x7d4 <vfprintf+0x27c>
 78a:	93 2d       	mov	r25, r3
 78c:	99 7f       	andi	r25, 0xF9	; 249
 78e:	b9 2e       	mov	r11, r25
 790:	8f 36       	cpi	r24, 0x6F	; 111
 792:	c1 f0       	breq	.+48     	; 0x7c4 <vfprintf+0x26c>
 794:	18 f4       	brcc	.+6      	; 0x79c <vfprintf+0x244>
 796:	88 35       	cpi	r24, 0x58	; 88
 798:	79 f0       	breq	.+30     	; 0x7b8 <vfprintf+0x260>
 79a:	b5 c0       	rjmp	.+362    	; 0x906 <__stack+0x7>
 79c:	80 37       	cpi	r24, 0x70	; 112
 79e:	19 f0       	breq	.+6      	; 0x7a6 <vfprintf+0x24e>
 7a0:	88 37       	cpi	r24, 0x78	; 120
 7a2:	21 f0       	breq	.+8      	; 0x7ac <vfprintf+0x254>
 7a4:	b0 c0       	rjmp	.+352    	; 0x906 <__stack+0x7>
 7a6:	e9 2f       	mov	r30, r25
 7a8:	e0 61       	ori	r30, 0x10	; 16
 7aa:	be 2e       	mov	r11, r30
 7ac:	b4 fe       	sbrs	r11, 4
 7ae:	0d c0       	rjmp	.+26     	; 0x7ca <vfprintf+0x272>
 7b0:	fb 2d       	mov	r31, r11
 7b2:	f4 60       	ori	r31, 0x04	; 4
 7b4:	bf 2e       	mov	r11, r31
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <vfprintf+0x272>
 7b8:	34 fe       	sbrs	r3, 4
 7ba:	0a c0       	rjmp	.+20     	; 0x7d0 <vfprintf+0x278>
 7bc:	29 2f       	mov	r18, r25
 7be:	26 60       	ori	r18, 0x06	; 6
 7c0:	b2 2e       	mov	r11, r18
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <vfprintf+0x278>
 7c4:	28 e0       	ldi	r18, 0x08	; 8
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <vfprintf+0x27c>
 7ca:	20 e1       	ldi	r18, 0x10	; 16
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x27c>
 7d0:	20 e1       	ldi	r18, 0x10	; 16
 7d2:	32 e0       	ldi	r19, 0x02	; 2
 7d4:	f8 01       	movw	r30, r16
 7d6:	b7 fe       	sbrs	r11, 7
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <vfprintf+0x290>
 7da:	60 81       	ld	r22, Z
 7dc:	71 81       	ldd	r23, Z+1	; 0x01
 7de:	82 81       	ldd	r24, Z+2	; 0x02
 7e0:	93 81       	ldd	r25, Z+3	; 0x03
 7e2:	0c 5f       	subi	r16, 0xFC	; 252
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <vfprintf+0x29c>
 7e8:	60 81       	ld	r22, Z
 7ea:	71 81       	ldd	r23, Z+1	; 0x01
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 5f       	subi	r16, 0xFE	; 254
 7f2:	1f 4f       	sbci	r17, 0xFF	; 255
 7f4:	a3 01       	movw	r20, r6
 7f6:	0e 94 df 04 	call	0x9be	; 0x9be <__ultoa_invert>
 7fa:	88 2e       	mov	r8, r24
 7fc:	86 18       	sub	r8, r6
 7fe:	fb 2d       	mov	r31, r11
 800:	ff 77       	andi	r31, 0x7F	; 127
 802:	3f 2e       	mov	r3, r31
 804:	36 fe       	sbrs	r3, 6
 806:	0d c0       	rjmp	.+26     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 808:	23 2d       	mov	r18, r3
 80a:	2e 7f       	andi	r18, 0xFE	; 254
 80c:	a2 2e       	mov	r10, r18
 80e:	89 14       	cp	r8, r9
 810:	58 f4       	brcc	.+22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 812:	34 fe       	sbrs	r3, 4
 814:	0b c0       	rjmp	.+22     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 816:	32 fc       	sbrc	r3, 2
 818:	09 c0       	rjmp	.+18     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81a:	83 2d       	mov	r24, r3
 81c:	8e 7e       	andi	r24, 0xEE	; 238
 81e:	a8 2e       	mov	r10, r24
 820:	05 c0       	rjmp	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 822:	b8 2c       	mov	r11, r8
 824:	a3 2c       	mov	r10, r3
 826:	03 c0       	rjmp	.+6      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 828:	b8 2c       	mov	r11, r8
 82a:	01 c0       	rjmp	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82c:	b9 2c       	mov	r11, r9
 82e:	a4 fe       	sbrs	r10, 4
 830:	0f c0       	rjmp	.+30     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 832:	fe 01       	movw	r30, r28
 834:	e8 0d       	add	r30, r8
 836:	f1 1d       	adc	r31, r1
 838:	80 81       	ld	r24, Z
 83a:	80 33       	cpi	r24, 0x30	; 48
 83c:	21 f4       	brne	.+8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83e:	9a 2d       	mov	r25, r10
 840:	99 7e       	andi	r25, 0xE9	; 233
 842:	a9 2e       	mov	r10, r25
 844:	09 c0       	rjmp	.+18     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 846:	a2 fe       	sbrs	r10, 2
 848:	06 c0       	rjmp	.+12     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84a:	b3 94       	inc	r11
 84c:	b3 94       	inc	r11
 84e:	04 c0       	rjmp	.+8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 850:	8a 2d       	mov	r24, r10
 852:	86 78       	andi	r24, 0x86	; 134
 854:	09 f0       	breq	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 856:	b3 94       	inc	r11
 858:	a3 fc       	sbrc	r10, 3
 85a:	11 c0       	rjmp	.+34     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 85c:	a0 fe       	sbrs	r10, 0
 85e:	06 c0       	rjmp	.+12     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 860:	b2 14       	cp	r11, r2
 862:	88 f4       	brcc	.+34     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 864:	28 0c       	add	r2, r8
 866:	92 2c       	mov	r9, r2
 868:	9b 18       	sub	r9, r11
 86a:	0e c0       	rjmp	.+28     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 86c:	b2 14       	cp	r11, r2
 86e:	60 f4       	brcc	.+24     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 870:	b6 01       	movw	r22, r12
 872:	80 e2       	ldi	r24, 0x20	; 32
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 87a:	b3 94       	inc	r11
 87c:	f7 cf       	rjmp	.-18     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 87e:	b2 14       	cp	r11, r2
 880:	18 f4       	brcc	.+6      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 882:	2b 18       	sub	r2, r11
 884:	02 c0       	rjmp	.+4      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 886:	98 2c       	mov	r9, r8
 888:	21 2c       	mov	r2, r1
 88a:	a4 fe       	sbrs	r10, 4
 88c:	10 c0       	rjmp	.+32     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 88e:	b6 01       	movw	r22, r12
 890:	80 e3       	ldi	r24, 0x30	; 48
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 898:	a2 fe       	sbrs	r10, 2
 89a:	17 c0       	rjmp	.+46     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 89c:	a1 fc       	sbrc	r10, 1
 89e:	03 c0       	rjmp	.+6      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 8a0:	88 e7       	ldi	r24, 0x78	; 120
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a6:	88 e5       	ldi	r24, 0x58	; 88
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	b6 01       	movw	r22, r12
 8ac:	0c c0       	rjmp	.+24     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8ae:	8a 2d       	mov	r24, r10
 8b0:	86 78       	andi	r24, 0x86	; 134
 8b2:	59 f0       	breq	.+22     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8b4:	a1 fe       	sbrs	r10, 1
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8b8:	8b e2       	ldi	r24, 0x2B	; 43
 8ba:	01 c0       	rjmp	.+2      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8bc:	80 e2       	ldi	r24, 0x20	; 32
 8be:	a7 fc       	sbrc	r10, 7
 8c0:	8d e2       	ldi	r24, 0x2D	; 45
 8c2:	b6 01       	movw	r22, r12
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 8ca:	89 14       	cp	r8, r9
 8cc:	38 f4       	brcc	.+14     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ce:	b6 01       	movw	r22, r12
 8d0:	80 e3       	ldi	r24, 0x30	; 48
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 8d8:	9a 94       	dec	r9
 8da:	f7 cf       	rjmp	.-18     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8dc:	8a 94       	dec	r8
 8de:	f3 01       	movw	r30, r6
 8e0:	e8 0d       	add	r30, r8
 8e2:	f1 1d       	adc	r31, r1
 8e4:	80 81       	ld	r24, Z
 8e6:	b6 01       	movw	r22, r12
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 8ee:	81 10       	cpse	r8, r1
 8f0:	f5 cf       	rjmp	.-22     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8f2:	22 20       	and	r2, r2
 8f4:	09 f4       	brne	.+2      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8f6:	42 ce       	rjmp	.-892    	; 0x57c <vfprintf+0x24>
 8f8:	b6 01       	movw	r22, r12
 8fa:	80 e2       	ldi	r24, 0x20	; 32
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 902:	2a 94       	dec	r2
 904:	f6 cf       	rjmp	.-20     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 906:	f6 01       	movw	r30, r12
 908:	86 81       	ldd	r24, Z+6	; 0x06
 90a:	97 81       	ldd	r25, Z+7	; 0x07
 90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0x13>
 90e:	8f ef       	ldi	r24, 0xFF	; 255
 910:	9f ef       	ldi	r25, 0xFF	; 255
 912:	2b 96       	adiw	r28, 0x0b	; 11
 914:	e2 e1       	ldi	r30, 0x12	; 18
 916:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__epilogue_restores__>

0000091a <strnlen_P>:
 91a:	fc 01       	movw	r30, r24
 91c:	05 90       	lpm	r0, Z+
 91e:	61 50       	subi	r22, 0x01	; 1
 920:	70 40       	sbci	r23, 0x00	; 0
 922:	01 10       	cpse	r0, r1
 924:	d8 f7       	brcc	.-10     	; 0x91c <strnlen_P+0x2>
 926:	80 95       	com	r24
 928:	90 95       	com	r25
 92a:	8e 0f       	add	r24, r30
 92c:	9f 1f       	adc	r25, r31
 92e:	08 95       	ret

00000930 <strnlen>:
 930:	fc 01       	movw	r30, r24
 932:	61 50       	subi	r22, 0x01	; 1
 934:	70 40       	sbci	r23, 0x00	; 0
 936:	01 90       	ld	r0, Z+
 938:	01 10       	cpse	r0, r1
 93a:	d8 f7       	brcc	.-10     	; 0x932 <strnlen+0x2>
 93c:	80 95       	com	r24
 93e:	90 95       	com	r25
 940:	8e 0f       	add	r24, r30
 942:	9f 1f       	adc	r25, r31
 944:	08 95       	ret

00000946 <fputc>:
 946:	0f 93       	push	r16
 948:	1f 93       	push	r17
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	fb 01       	movw	r30, r22
 950:	23 81       	ldd	r18, Z+3	; 0x03
 952:	21 fd       	sbrc	r18, 1
 954:	03 c0       	rjmp	.+6      	; 0x95c <fputc+0x16>
 956:	8f ef       	ldi	r24, 0xFF	; 255
 958:	9f ef       	ldi	r25, 0xFF	; 255
 95a:	2c c0       	rjmp	.+88     	; 0x9b4 <fputc+0x6e>
 95c:	22 ff       	sbrs	r18, 2
 95e:	16 c0       	rjmp	.+44     	; 0x98c <fputc+0x46>
 960:	46 81       	ldd	r20, Z+6	; 0x06
 962:	57 81       	ldd	r21, Z+7	; 0x07
 964:	24 81       	ldd	r18, Z+4	; 0x04
 966:	35 81       	ldd	r19, Z+5	; 0x05
 968:	42 17       	cp	r20, r18
 96a:	53 07       	cpc	r21, r19
 96c:	44 f4       	brge	.+16     	; 0x97e <fputc+0x38>
 96e:	a0 81       	ld	r26, Z
 970:	b1 81       	ldd	r27, Z+1	; 0x01
 972:	9d 01       	movw	r18, r26
 974:	2f 5f       	subi	r18, 0xFF	; 255
 976:	3f 4f       	sbci	r19, 0xFF	; 255
 978:	31 83       	std	Z+1, r19	; 0x01
 97a:	20 83       	st	Z, r18
 97c:	8c 93       	st	X, r24
 97e:	26 81       	ldd	r18, Z+6	; 0x06
 980:	37 81       	ldd	r19, Z+7	; 0x07
 982:	2f 5f       	subi	r18, 0xFF	; 255
 984:	3f 4f       	sbci	r19, 0xFF	; 255
 986:	37 83       	std	Z+7, r19	; 0x07
 988:	26 83       	std	Z+6, r18	; 0x06
 98a:	14 c0       	rjmp	.+40     	; 0x9b4 <fputc+0x6e>
 98c:	8b 01       	movw	r16, r22
 98e:	ec 01       	movw	r28, r24
 990:	fb 01       	movw	r30, r22
 992:	00 84       	ldd	r0, Z+8	; 0x08
 994:	f1 85       	ldd	r31, Z+9	; 0x09
 996:	e0 2d       	mov	r30, r0
 998:	09 95       	icall
 99a:	89 2b       	or	r24, r25
 99c:	e1 f6       	brne	.-72     	; 0x956 <fputc+0x10>
 99e:	d8 01       	movw	r26, r16
 9a0:	16 96       	adiw	r26, 0x06	; 6
 9a2:	8d 91       	ld	r24, X+
 9a4:	9c 91       	ld	r25, X
 9a6:	17 97       	sbiw	r26, 0x07	; 7
 9a8:	01 96       	adiw	r24, 0x01	; 1
 9aa:	17 96       	adiw	r26, 0x07	; 7
 9ac:	9c 93       	st	X, r25
 9ae:	8e 93       	st	-X, r24
 9b0:	16 97       	sbiw	r26, 0x06	; 6
 9b2:	ce 01       	movw	r24, r28
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	08 95       	ret

000009be <__ultoa_invert>:
 9be:	fa 01       	movw	r30, r20
 9c0:	aa 27       	eor	r26, r26
 9c2:	28 30       	cpi	r18, 0x08	; 8
 9c4:	51 f1       	breq	.+84     	; 0xa1a <__ultoa_invert+0x5c>
 9c6:	20 31       	cpi	r18, 0x10	; 16
 9c8:	81 f1       	breq	.+96     	; 0xa2a <__ultoa_invert+0x6c>
 9ca:	e8 94       	clt
 9cc:	6f 93       	push	r22
 9ce:	6e 7f       	andi	r22, 0xFE	; 254
 9d0:	6e 5f       	subi	r22, 0xFE	; 254
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	af 4f       	sbci	r26, 0xFF	; 255
 9da:	b1 e0       	ldi	r27, 0x01	; 1
 9dc:	3e d0       	rcall	.+124    	; 0xa5a <__ultoa_invert+0x9c>
 9de:	b4 e0       	ldi	r27, 0x04	; 4
 9e0:	3c d0       	rcall	.+120    	; 0xa5a <__ultoa_invert+0x9c>
 9e2:	67 0f       	add	r22, r23
 9e4:	78 1f       	adc	r23, r24
 9e6:	89 1f       	adc	r24, r25
 9e8:	9a 1f       	adc	r25, r26
 9ea:	a1 1d       	adc	r26, r1
 9ec:	68 0f       	add	r22, r24
 9ee:	79 1f       	adc	r23, r25
 9f0:	8a 1f       	adc	r24, r26
 9f2:	91 1d       	adc	r25, r1
 9f4:	a1 1d       	adc	r26, r1
 9f6:	6a 0f       	add	r22, r26
 9f8:	71 1d       	adc	r23, r1
 9fa:	81 1d       	adc	r24, r1
 9fc:	91 1d       	adc	r25, r1
 9fe:	a1 1d       	adc	r26, r1
 a00:	20 d0       	rcall	.+64     	; 0xa42 <__ultoa_invert+0x84>
 a02:	09 f4       	brne	.+2      	; 0xa06 <__ultoa_invert+0x48>
 a04:	68 94       	set
 a06:	3f 91       	pop	r19
 a08:	2a e0       	ldi	r18, 0x0A	; 10
 a0a:	26 9f       	mul	r18, r22
 a0c:	11 24       	eor	r1, r1
 a0e:	30 19       	sub	r19, r0
 a10:	30 5d       	subi	r19, 0xD0	; 208
 a12:	31 93       	st	Z+, r19
 a14:	de f6       	brtc	.-74     	; 0x9cc <__ultoa_invert+0xe>
 a16:	cf 01       	movw	r24, r30
 a18:	08 95       	ret
 a1a:	46 2f       	mov	r20, r22
 a1c:	47 70       	andi	r20, 0x07	; 7
 a1e:	40 5d       	subi	r20, 0xD0	; 208
 a20:	41 93       	st	Z+, r20
 a22:	b3 e0       	ldi	r27, 0x03	; 3
 a24:	0f d0       	rcall	.+30     	; 0xa44 <__ultoa_invert+0x86>
 a26:	c9 f7       	brne	.-14     	; 0xa1a <__ultoa_invert+0x5c>
 a28:	f6 cf       	rjmp	.-20     	; 0xa16 <__ultoa_invert+0x58>
 a2a:	46 2f       	mov	r20, r22
 a2c:	4f 70       	andi	r20, 0x0F	; 15
 a2e:	40 5d       	subi	r20, 0xD0	; 208
 a30:	4a 33       	cpi	r20, 0x3A	; 58
 a32:	18 f0       	brcs	.+6      	; 0xa3a <__ultoa_invert+0x7c>
 a34:	49 5d       	subi	r20, 0xD9	; 217
 a36:	31 fd       	sbrc	r19, 1
 a38:	40 52       	subi	r20, 0x20	; 32
 a3a:	41 93       	st	Z+, r20
 a3c:	02 d0       	rcall	.+4      	; 0xa42 <__ultoa_invert+0x84>
 a3e:	a9 f7       	brne	.-22     	; 0xa2a <__ultoa_invert+0x6c>
 a40:	ea cf       	rjmp	.-44     	; 0xa16 <__ultoa_invert+0x58>
 a42:	b4 e0       	ldi	r27, 0x04	; 4
 a44:	a6 95       	lsr	r26
 a46:	97 95       	ror	r25
 a48:	87 95       	ror	r24
 a4a:	77 95       	ror	r23
 a4c:	67 95       	ror	r22
 a4e:	ba 95       	dec	r27
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__ultoa_invert+0x86>
 a52:	00 97       	sbiw	r24, 0x00	; 0
 a54:	61 05       	cpc	r22, r1
 a56:	71 05       	cpc	r23, r1
 a58:	08 95       	ret
 a5a:	9b 01       	movw	r18, r22
 a5c:	ac 01       	movw	r20, r24
 a5e:	0a 2e       	mov	r0, r26
 a60:	06 94       	lsr	r0
 a62:	57 95       	ror	r21
 a64:	47 95       	ror	r20
 a66:	37 95       	ror	r19
 a68:	27 95       	ror	r18
 a6a:	ba 95       	dec	r27
 a6c:	c9 f7       	brne	.-14     	; 0xa60 <__ultoa_invert+0xa2>
 a6e:	62 0f       	add	r22, r18
 a70:	73 1f       	adc	r23, r19
 a72:	84 1f       	adc	r24, r20
 a74:	95 1f       	adc	r25, r21
 a76:	a0 1d       	adc	r26, r0
 a78:	08 95       	ret

00000a7a <__prologue_saves__>:
 a7a:	2f 92       	push	r2
 a7c:	3f 92       	push	r3
 a7e:	4f 92       	push	r4
 a80:	5f 92       	push	r5
 a82:	6f 92       	push	r6
 a84:	7f 92       	push	r7
 a86:	8f 92       	push	r8
 a88:	9f 92       	push	r9
 a8a:	af 92       	push	r10
 a8c:	bf 92       	push	r11
 a8e:	cf 92       	push	r12
 a90:	df 92       	push	r13
 a92:	ef 92       	push	r14
 a94:	ff 92       	push	r15
 a96:	0f 93       	push	r16
 a98:	1f 93       	push	r17
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	cd b7       	in	r28, 0x3d	; 61
 aa0:	de b7       	in	r29, 0x3e	; 62
 aa2:	ca 1b       	sub	r28, r26
 aa4:	db 0b       	sbc	r29, r27
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	f8 94       	cli
 aaa:	de bf       	out	0x3e, r29	; 62
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	cd bf       	out	0x3d, r28	; 61
 ab0:	09 94       	ijmp

00000ab2 <__epilogue_restores__>:
 ab2:	2a 88       	ldd	r2, Y+18	; 0x12
 ab4:	39 88       	ldd	r3, Y+17	; 0x11
 ab6:	48 88       	ldd	r4, Y+16	; 0x10
 ab8:	5f 84       	ldd	r5, Y+15	; 0x0f
 aba:	6e 84       	ldd	r6, Y+14	; 0x0e
 abc:	7d 84       	ldd	r7, Y+13	; 0x0d
 abe:	8c 84       	ldd	r8, Y+12	; 0x0c
 ac0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ac2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ac4:	b9 84       	ldd	r11, Y+9	; 0x09
 ac6:	c8 84       	ldd	r12, Y+8	; 0x08
 ac8:	df 80       	ldd	r13, Y+7	; 0x07
 aca:	ee 80       	ldd	r14, Y+6	; 0x06
 acc:	fd 80       	ldd	r15, Y+5	; 0x05
 ace:	0c 81       	ldd	r16, Y+4	; 0x04
 ad0:	1b 81       	ldd	r17, Y+3	; 0x03
 ad2:	aa 81       	ldd	r26, Y+2	; 0x02
 ad4:	b9 81       	ldd	r27, Y+1	; 0x01
 ad6:	ce 0f       	add	r28, r30
 ad8:	d1 1d       	adc	r29, r1
 ada:	0f b6       	in	r0, 0x3f	; 63
 adc:	f8 94       	cli
 ade:	de bf       	out	0x3e, r29	; 62
 ae0:	0f be       	out	0x3f, r0	; 63
 ae2:	cd bf       	out	0x3d, r28	; 61
 ae4:	ed 01       	movw	r28, r26
 ae6:	08 95       	ret

00000ae8 <_exit>:
 ae8:	f8 94       	cli

00000aea <__stop_program>:
 aea:	ff cf       	rjmp	.-2      	; 0xaea <__stop_program>
