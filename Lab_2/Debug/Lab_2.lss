
Lab_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000b04  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800130  00800130  00000bc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000172b  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a13  00000000  00000000  000024bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b64  00000000  00000000  00002ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c92  00000000  00000000  0000426f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  9e:	0c 94 80 05 	jmp	0xb00	; 0xb00 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include <stdlib.h>
#include <util/delay.h>

void ADC_Init() {
	// Configura el ADC con una referencia de voltaje de AVcc y un preescalador de 128
	ADMUX = (1<<REFS0);  // Referencia de voltaje en AVcc
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Habilitar ADC y configurar preescalador a 128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Selecciona el canal de ADC
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	// Inicia la conversión
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	// Espera a que la conversión termine
	while(ADCSRA & (1<<ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC_Read+0x18>
	// Devuelve el resultado de la conversión
	return ADC;
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  dc:	08 95       	ret

000000de <ADC_Read_Multiple>:

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	6c 01       	movw	r12, r24
  f0:	7b 01       	movw	r14, r22
  f2:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < num_channels; i++) {
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	11 c0       	rjmp	.+34     	; 0x11a <ADC_Read_Multiple+0x3c>
		results[i] = ADC_Read(channels[i]);
  f8:	8c 2f       	mov	r24, r28
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	8c 01       	movw	r16, r24
  fe:	00 0f       	add	r16, r16
 100:	11 1f       	adc	r17, r17
 102:	0e 0d       	add	r16, r14
 104:	1f 1d       	adc	r17, r15
 106:	f6 01       	movw	r30, r12
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	80 81       	ld	r24, Z
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Read>
 112:	f8 01       	movw	r30, r16
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
	// Devuelve el resultado de la conversión
	return ADC;
}

void ADC_Read_Multiple(uint8_t channels[], uint16_t results[], uint8_t num_channels) {
	for (uint8_t i = 0; i < num_channels; i++) {
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	cd 17       	cp	r28, r29
 11c:	68 f3       	brcs	.-38     	; 0xf8 <ADC_Read_Multiple+0x1a>
		results[i] = ADC_Read(channels[i]);
	}
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	08 95       	ret

00000130 <Lcd_Port_8>:
////////////////////////////////////////////////////
// 8Bits.
////////////////////////////////////////////////////
void Lcd_Port_8(char a)
{
	if(a & 1) PORTB |= (1<<PORTB3); else PORTB &= ~(1<<PORTB3);
 130:	80 ff       	sbrs	r24, 0
 132:	04 c0       	rjmp	.+8      	; 0x13c <Lcd_Port_8+0xc>
 134:	95 b1       	in	r25, 0x05	; 5
 136:	98 60       	ori	r25, 0x08	; 8
 138:	95 b9       	out	0x05, r25	; 5
 13a:	03 c0       	rjmp	.+6      	; 0x142 <Lcd_Port_8+0x12>
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	97 7f       	andi	r25, 0xF7	; 247
 140:	95 b9       	out	0x05, r25	; 5
	if(a & 2) PORTB |= (1<<PORTB2); else PORTB &= ~(1<<PORTB2);
 142:	81 ff       	sbrs	r24, 1
 144:	04 c0       	rjmp	.+8      	; 0x14e <Lcd_Port_8+0x1e>
 146:	95 b1       	in	r25, 0x05	; 5
 148:	94 60       	ori	r25, 0x04	; 4
 14a:	95 b9       	out	0x05, r25	; 5
 14c:	03 c0       	rjmp	.+6      	; 0x154 <Lcd_Port_8+0x24>
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	9b 7f       	andi	r25, 0xFB	; 251
 152:	95 b9       	out	0x05, r25	; 5
	if(a & 4) PORTD |= (1<<PORTD2); else PORTD &= ~(1<<PORTD2);
 154:	82 ff       	sbrs	r24, 2
 156:	04 c0       	rjmp	.+8      	; 0x160 <Lcd_Port_8+0x30>
 158:	9b b1       	in	r25, 0x0b	; 11
 15a:	94 60       	ori	r25, 0x04	; 4
 15c:	9b b9       	out	0x0b, r25	; 11
 15e:	03 c0       	rjmp	.+6      	; 0x166 <Lcd_Port_8+0x36>
 160:	9b b1       	in	r25, 0x0b	; 11
 162:	9b 7f       	andi	r25, 0xFB	; 251
 164:	9b b9       	out	0x0b, r25	; 11
	if(a & 8) PORTD |= (1<<PORTD3); else PORTD &= ~(1<<PORTD3);
 166:	83 ff       	sbrs	r24, 3
 168:	04 c0       	rjmp	.+8      	; 0x172 <Lcd_Port_8+0x42>
 16a:	9b b1       	in	r25, 0x0b	; 11
 16c:	98 60       	ori	r25, 0x08	; 8
 16e:	9b b9       	out	0x0b, r25	; 11
 170:	03 c0       	rjmp	.+6      	; 0x178 <Lcd_Port_8+0x48>
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	97 7f       	andi	r25, 0xF7	; 247
 176:	9b b9       	out	0x0b, r25	; 11
	if(a & 16) PORTD |= (1<<PORTD4); else PORTD &= ~(1<<PORTD4);
 178:	84 ff       	sbrs	r24, 4
 17a:	04 c0       	rjmp	.+8      	; 0x184 <Lcd_Port_8+0x54>
 17c:	9b b1       	in	r25, 0x0b	; 11
 17e:	90 61       	ori	r25, 0x10	; 16
 180:	9b b9       	out	0x0b, r25	; 11
 182:	03 c0       	rjmp	.+6      	; 0x18a <Lcd_Port_8+0x5a>
 184:	9b b1       	in	r25, 0x0b	; 11
 186:	9f 7e       	andi	r25, 0xEF	; 239
 188:	9b b9       	out	0x0b, r25	; 11
	if(a & 32) PORTD |= (1<<PORTD5); else PORTD &= ~(1<<PORTD5);
 18a:	85 ff       	sbrs	r24, 5
 18c:	04 c0       	rjmp	.+8      	; 0x196 <Lcd_Port_8+0x66>
 18e:	9b b1       	in	r25, 0x0b	; 11
 190:	90 62       	ori	r25, 0x20	; 32
 192:	9b b9       	out	0x0b, r25	; 11
 194:	03 c0       	rjmp	.+6      	; 0x19c <Lcd_Port_8+0x6c>
 196:	9b b1       	in	r25, 0x0b	; 11
 198:	9f 7d       	andi	r25, 0xDF	; 223
 19a:	9b b9       	out	0x0b, r25	; 11
	if(a & 64) PORTD |= (1<<PORTD6); else PORTD &= ~(1<<PORTD6);
 19c:	86 ff       	sbrs	r24, 6
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <Lcd_Port_8+0x78>
 1a0:	9b b1       	in	r25, 0x0b	; 11
 1a2:	90 64       	ori	r25, 0x40	; 64
 1a4:	9b b9       	out	0x0b, r25	; 11
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <Lcd_Port_8+0x7e>
 1a8:	9b b1       	in	r25, 0x0b	; 11
 1aa:	9f 7b       	andi	r25, 0xBF	; 191
 1ac:	9b b9       	out	0x0b, r25	; 11
	if(a & 128) PORTD |= (1<<PORTD7); else PORTD &= ~(1<<PORTD7);
 1ae:	88 23       	and	r24, r24
 1b0:	24 f4       	brge	.+8      	; 0x1ba <Lcd_Port_8+0x8a>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	08 95       	ret
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 77       	andi	r24, 0x7F	; 127
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	08 95       	ret

000001c2 <Lcd_Cmd_8>:
}

void Lcd_Cmd_8(char a)
{
	PORTB &= ~(1<<PORTB1);  // RS = 0
 1c2:	95 b1       	in	r25, 0x05	; 5
 1c4:	9d 7f       	andi	r25, 0xFD	; 253
 1c6:	95 b9       	out	0x05, r25	; 5
	Lcd_Port_8(a);
 1c8:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Port_8>
	PORTB |= (1<<PORTB0);   // Enable = 1
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	9f e1       	ldi	r25, 0x1F	; 31
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Lcd_Cmd_8+0x14>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <Lcd_Cmd_8+0x1a>
 1dc:	00 00       	nop
	_delay_ms(2);           // Ajustar el retardo si es necesario
	PORTB &= ~(1<<PORTB0);  // Enable = 0
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	8f e3       	ldi	r24, 0x3F	; 63
 1e6:	9f e1       	ldi	r25, 0x1F	; 31
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <Lcd_Cmd_8+0x26>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <Lcd_Cmd_8+0x2c>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <Lcd_InitLCD8bits>:
	_delay_ms(2);
}

void Lcd_InitLCD8bits()
{
	PORTB &= ~(1<<PORTB1);   //RS = 0, se le indica que es modo comando
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	8d 7f       	andi	r24, 0xFD	; 253
 1f6:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB0);   //E = 0
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8e 7f       	andi	r24, 0xFE	; 254
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	89 ef       	ldi	r24, 0xF9	; 249
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <Lcd_InitLCD8bits+0x12>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <Lcd_InitLCD8bits+0x1c>
 20e:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	 Lcd_Cmd_8(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
 216:	8f e1       	ldi	r24, 0x1F	; 31
 218:	9e e4       	ldi	r25, 0x4E	; 78
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <Lcd_InitLCD8bits+0x28>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <Lcd_InitLCD8bits+0x2e>
 220:	00 00       	nop
	_delay_ms(5);
	 Lcd_Cmd_8(0x30);
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
 228:	8f e1       	ldi	r24, 0x1F	; 31
 22a:	9e e4       	ldi	r25, 0x4E	; 78
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <Lcd_InitLCD8bits+0x3a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <Lcd_InitLCD8bits+0x40>
 232:	00 00       	nop
	_delay_ms(5);
	 Lcd_Cmd_8(0x30);
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	9c e9       	ldi	r25, 0x9C	; 156
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <Lcd_InitLCD8bits+0x4c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <Lcd_InitLCD8bits+0x52>
 244:	00 00       	nop
	_delay_ms(10);

	 Lcd_Cmd_8(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 246:	88 e3       	ldi	r24, 0x38	; 56
 248:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
	 Lcd_Cmd_8(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 24c:	8c e0       	ldi	r24, 0x0C	; 12
 24e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
	 Lcd_Cmd_8(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
	 Lcd_Cmd_8(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
 25e:	08 95       	ret

00000260 <Lcd_Clear_8>:
	
}

void Lcd_Clear_8()
{
	Lcd_Cmd_8(0x01);  // Comando para limpiar el LCD
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	9f e1       	ldi	r25, 0x1F	; 31
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <Lcd_Clear_8+0xa>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <Lcd_Clear_8+0x10>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <Lcd_Set_Cursor_8>:
}

void Lcd_Set_Cursor_8(char a, char b)
{
	char temp;
	if(a == 1)
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	29 f4       	brne	.+10     	; 0x282 <Lcd_Set_Cursor_8+0xe>
	{
		temp = 0x80 + b;
		Lcd_Cmd_8(temp);
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	86 0f       	add	r24, r22
 27c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
 280:	08 95       	ret
	}
	else if(a == 2)
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	21 f4       	brne	.+8      	; 0x28e <Lcd_Set_Cursor_8+0x1a>
	{
		temp = 0xC0 + b;
		Lcd_Cmd_8(temp);
 286:	80 ec       	ldi	r24, 0xC0	; 192
 288:	86 0f       	add	r24, r22
 28a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lcd_Cmd_8>
 28e:	08 95       	ret

00000290 <Lcd_Write_Char_8>:
	}
}

void Lcd_Write_Char_8(char a)
{
	PORTB |= (1<<PORTB1);   // RS = 1
 290:	95 b1       	in	r25, 0x05	; 5
 292:	92 60       	ori	r25, 0x02	; 2
 294:	95 b9       	out	0x05, r25	; 5
	Lcd_Port_8(a);            // Enviar datos
 296:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Port_8>
	PORTB |= (1<<PORTB0);   // Enable = 1
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	8f e3       	ldi	r24, 0x3F	; 63
 2a2:	9f e1       	ldi	r25, 0x1F	; 31
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <Lcd_Write_Char_8+0x14>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <Lcd_Write_Char_8+0x1a>
 2aa:	00 00       	nop
	_delay_ms(2);
	PORTB &= ~(1<<PORTB0);  // Enable = 0
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	8e 7f       	andi	r24, 0xFE	; 254
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	9f e1       	ldi	r25, 0x1F	; 31
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Lcd_Write_Char_8+0x26>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <Lcd_Write_Char_8+0x2c>
 2bc:	00 00       	nop
 2be:	08 95       	ret

000002c0 <Lcd_Write_String_8>:
	_delay_ms(2);
}

void Lcd_Write_String_8(char *a)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
	while(*a)
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <Lcd_Write_String_8+0xe>
	{
		Lcd_Write_Char_8(*a++);
 2c8:	21 96       	adiw	r28, 0x01	; 1
 2ca:	0e 94 48 01 	call	0x290	; 0x290 <Lcd_Write_Char_8>
	_delay_ms(2);
}

void Lcd_Write_String_8(char *a)
{
	while(*a)
 2ce:	88 81       	ld	r24, Y
 2d0:	81 11       	cpse	r24, r1
 2d2:	fa cf       	rjmp	.-12     	; 0x2c8 <Lcd_Write_String_8+0x8>
	{
		Lcd_Write_Char_8(*a++);
	}
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <main>:
////////////////////////////////////////////////////
// Programa Principal
////////////////////////////////////////////////////

int main(void)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <main+0x6>
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	// Configuración de puertos y periféricos
	DDRD = 0xFF;  // Configura todos los pines del puerto D como salidas
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x03;  // Configura los primeros dos pines del puerto B como salidas
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	84 b9       	out	0x04, r24	; 4
	Lcd_InitLCD8bits();  // Inicializa el LCD en modo de 8 bits
 2ec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Lcd_InitLCD8bits>
	ADC_Init();  // Inicializa el ADC
 2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	UART_Init(BAUD);  // Inicializa la UART
 2f4:	60 e8       	ldi	r22, 0x80	; 128
 2f6:	75 e2       	ldi	r23, 0x25	; 37
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 36 02 	call	0x46c	; 0x46c <UART_Init>

	uint8_t adc_channels[] = {7, 6};  // Canales ADC a leer (ADC7 y ADC6)
 300:	87 e0       	ldi	r24, 0x07	; 7
 302:	89 83       	std	Y+1, r24	; 0x01
 304:	86 e0       	ldi	r24, 0x06	; 6
 306:	8a 83       	std	Y+2, r24	; 0x02

	// Configuración inicial del LCD
	Lcd_Clear_8();  // Limpiar el LCD
 308:	0e 94 30 01 	call	0x260	; 0x260 <Lcd_Clear_8>
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	81 ee       	ldi	r24, 0xE1	; 225
 310:	94 e0       	ldi	r25, 0x04	; 4
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x38>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x42>
 31c:	00 00       	nop
	_delay_ms(100);  // Esperar para asegurar que el LCD esté listo
	Lcd_Set_Cursor_8(1, 0);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 3a 01 	call	0x274	; 0x274 <Lcd_Set_Cursor_8>
	Lcd_Write_String_8("S:  S2:  S3:");
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Lcd_Write_String_8>

	while (1)
	{
		// Leer los valores de los ADC
		ADC_Read_Multiple(adc_channels, adc_results, 2);
 32e:	42 e0       	ldi	r20, 0x02	; 2
 330:	62 e4       	ldi	r22, 0x42	; 66
 332:	71 e0       	ldi	r23, 0x01	; 1
 334:	ce 01       	movw	r24, r28
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	0e 94 6f 00 	call	0xde	; 0xde <ADC_Read_Multiple>

		// Mostrar los valores en el LCD
		Lcd_Set_Cursor_8(2, 0);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 3a 01 	call	0x274	; 0x274 <Lcd_Set_Cursor_8>
		snprintf(buffer, sizeof(buffer), "%4u", adc_results[1]);
 344:	0f 2e       	mov	r0, r31
 346:	f2 e4       	ldi	r31, 0x42	; 66
 348:	ef 2e       	mov	r14, r31
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	ff 2e       	mov	r15, r31
 34e:	f0 2d       	mov	r31, r0
 350:	f7 01       	movw	r30, r14
 352:	83 81       	ldd	r24, Z+3	; 0x03
 354:	8f 93       	push	r24
 356:	82 81       	ldd	r24, Z+2	; 0x02
 358:	8f 93       	push	r24
 35a:	0f 2e       	mov	r0, r31
 35c:	fd e0       	ldi	r31, 0x0D	; 13
 35e:	af 2e       	mov	r10, r31
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	bf 2e       	mov	r11, r31
 364:	f0 2d       	mov	r31, r0
 366:	bf 92       	push	r11
 368:	af 92       	push	r10
 36a:	1f 92       	push	r1
 36c:	68 94       	set
 36e:	dd 24       	eor	r13, r13
 370:	d4 f8       	bld	r13, 4
 372:	df 92       	push	r13
 374:	02 e3       	ldi	r16, 0x32	; 50
 376:	11 e0       	ldi	r17, 0x01	; 1
 378:	1f 93       	push	r17
 37a:	0f 93       	push	r16
 37c:	0e 94 88 02 	call	0x510	; 0x510 <snprintf>
		Lcd_Write_String_8(buffer);
 380:	c8 01       	movw	r24, r16
 382:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Lcd_Write_String_8>

		Lcd_Set_Cursor_8(2, 6);
 386:	66 e0       	ldi	r22, 0x06	; 6
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 3a 01 	call	0x274	; 0x274 <Lcd_Set_Cursor_8>
		snprintf(buffer, sizeof(buffer), "%4u", adc_results[0]);
 38e:	f7 01       	movw	r30, r14
 390:	81 81       	ldd	r24, Z+1	; 0x01
 392:	8f 93       	push	r24
 394:	80 81       	ld	r24, Z
 396:	8f 93       	push	r24
 398:	bf 92       	push	r11
 39a:	af 92       	push	r10
 39c:	1f 92       	push	r1
 39e:	df 92       	push	r13
 3a0:	1f 93       	push	r17
 3a2:	0f 93       	push	r16
 3a4:	0e 94 88 02 	call	0x510	; 0x510 <snprintf>
		Lcd_Write_String_8(buffer);
 3a8:	c8 01       	movw	r24, r16
 3aa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Lcd_Write_String_8>

		Lcd_Set_Cursor_8(2, 10);
 3ae:	6a e0       	ldi	r22, 0x0A	; 10
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 3a 01 	call	0x274	; 0x274 <Lcd_Set_Cursor_8>
		snprintf(buffer, sizeof(buffer), "%4d", counter);
 3b6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__data_end+0x1>
 3ba:	8f 93       	push	r24
 3bc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 3c0:	8f 93       	push	r24
 3c2:	81 e1       	ldi	r24, 0x11	; 17
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	1f 92       	push	r1
 3cc:	df 92       	push	r13
 3ce:	1f 93       	push	r17
 3d0:	0f 93       	push	r16
 3d2:	0e 94 88 02 	call	0x510	; 0x510 <snprintf>
		Lcd_Write_String_8(buffer);
 3d6:	c8 01       	movw	r24, r16
 3d8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Lcd_Write_String_8>

		// Enviar los valores de los ADC y el contador a través de UART
		snprintf(buffer, sizeof(buffer), "ADC6:%u,ADC7:%u,Count:%d\r\n", adc_results[1], adc_results[0], counter);
 3dc:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__data_end+0x1>
 3e0:	8f 93       	push	r24
 3e2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 3e6:	8f 93       	push	r24
 3e8:	f7 01       	movw	r30, r14
 3ea:	81 81       	ldd	r24, Z+1	; 0x01
 3ec:	8f 93       	push	r24
 3ee:	80 81       	ld	r24, Z
 3f0:	8f 93       	push	r24
 3f2:	83 81       	ldd	r24, Z+3	; 0x03
 3f4:	8f 93       	push	r24
 3f6:	82 81       	ldd	r24, Z+2	; 0x02
 3f8:	8f 93       	push	r24
 3fa:	85 e1       	ldi	r24, 0x15	; 21
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	9f 93       	push	r25
 400:	8f 93       	push	r24
 402:	1f 92       	push	r1
 404:	df 92       	push	r13
 406:	1f 93       	push	r17
 408:	0f 93       	push	r16
 40a:	0e 94 88 02 	call	0x510	; 0x510 <snprintf>
		UART_TransmitString(buffer);
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	c8 01       	movw	r24, r16
 41a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <UART_TransmitString>

		// Leer y procesar los comandos de la UART
		if (UCSR0A & (1 << RXC0)) {  // Verificar si hay datos disponibles en el buffer de recepción
 41e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 422:	88 23       	and	r24, r24
 424:	cc f4       	brge	.+50     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
			unsigned char received_char = UART_Receive();
 426:	0e 94 52 02 	call	0x4a4	; 0x4a4 <UART_Receive>
			if (received_char == '+') {
 42a:	8b 32       	cpi	r24, 0x2B	; 43
 42c:	51 f4       	brne	.+20     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				counter++;  // Incrementar el contador
 42e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 432:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 43c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 440:	0b c0       	rjmp	.+22     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
				} else if (received_char == '-') {
 442:	8d 32       	cpi	r24, 0x2D	; 45
 444:	49 f4       	brne	.+18     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
				counter--;  // Decrementar el contador
 446:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 44a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 454:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 458:	9f ef       	ldi	r25, 0xFF	; 255
 45a:	e9 e6       	ldi	r30, 0x69	; 105
 45c:	f8 e1       	ldi	r31, 0x18	; 24
 45e:	91 50       	subi	r25, 0x01	; 1
 460:	e0 40       	sbci	r30, 0x00	; 0
 462:	f0 40       	sbci	r31, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	61 cf       	rjmp	.-318    	; 0x32e <main+0x54>

0000046c <UART_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
#include "UART.h"

void UART_Init(unsigned long baud_rate) {
 46c:	9b 01       	movw	r18, r22
 46e:	ac 01       	movw	r20, r24
	unsigned int ubrr = F_CPU / 16 / baud_rate - 1;
 470:	60 e4       	ldi	r22, 0x40	; 64
 472:	72 e4       	ldi	r23, 0x42	; 66
 474:	8f e0       	ldi	r24, 0x0F	; 15
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodsi4>
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 480:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 484:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);  // Habilitar el receptor y el transmisor
 488:	88 e1       	ldi	r24, 0x18	; 24
 48a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar el formato de datos: 8 bits
 48e:	86 e0       	ldi	r24, 0x06	; 6
 490:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 494:	08 95       	ret

00000496 <UART_Transmit>:
}

void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer de transmisión esté vacío
 496:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 49a:	95 ff       	sbrs	r25, 5
 49c:	fc cf       	rjmp	.-8      	; 0x496 <UART_Transmit>
	UDR0 = data;  // Enviar el dato
 49e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4a2:	08 95       	ret

000004a4 <UART_Receive>:
}

unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
 4a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4a8:	88 23       	and	r24, r24
 4aa:	e4 f7       	brge	.-8      	; 0x4a4 <UART_Receive>
	return UDR0;  // Leer el dato recibido
 4ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 4b0:	08 95       	ret

000004b2 <UART_TransmitString>:

void UART_TransmitString(const char *str) {
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	ec 01       	movw	r28, r24
	while (*str) {
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <UART_TransmitString+0xe>
		UART_Transmit(*str++);
 4ba:	21 96       	adiw	r28, 0x01	; 1
 4bc:	0e 94 4b 02 	call	0x496	; 0x496 <UART_Transmit>
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a que los datos estén disponibles
	return UDR0;  // Leer el dato recibido
}

void UART_TransmitString(const char *str) {
	while (*str) {
 4c0:	88 81       	ld	r24, Y
 4c2:	81 11       	cpse	r24, r1
 4c4:	fa cf       	rjmp	.-12     	; 0x4ba <UART_TransmitString+0x8>
		UART_Transmit(*str++);
	}
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <__udivmodsi4>:
 4cc:	a1 e2       	ldi	r26, 0x21	; 33
 4ce:	1a 2e       	mov	r1, r26
 4d0:	aa 1b       	sub	r26, r26
 4d2:	bb 1b       	sub	r27, r27
 4d4:	fd 01       	movw	r30, r26
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__udivmodsi4_ep>

000004d8 <__udivmodsi4_loop>:
 4d8:	aa 1f       	adc	r26, r26
 4da:	bb 1f       	adc	r27, r27
 4dc:	ee 1f       	adc	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	a2 17       	cp	r26, r18
 4e2:	b3 07       	cpc	r27, r19
 4e4:	e4 07       	cpc	r30, r20
 4e6:	f5 07       	cpc	r31, r21
 4e8:	20 f0       	brcs	.+8      	; 0x4f2 <__udivmodsi4_ep>
 4ea:	a2 1b       	sub	r26, r18
 4ec:	b3 0b       	sbc	r27, r19
 4ee:	e4 0b       	sbc	r30, r20
 4f0:	f5 0b       	sbc	r31, r21

000004f2 <__udivmodsi4_ep>:
 4f2:	66 1f       	adc	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	1a 94       	dec	r1
 4fc:	69 f7       	brne	.-38     	; 0x4d8 <__udivmodsi4_loop>
 4fe:	60 95       	com	r22
 500:	70 95       	com	r23
 502:	80 95       	com	r24
 504:	90 95       	com	r25
 506:	9b 01       	movw	r18, r22
 508:	ac 01       	movw	r20, r24
 50a:	bd 01       	movw	r22, r26
 50c:	cf 01       	movw	r24, r30
 50e:	08 95       	ret

00000510 <snprintf>:
 510:	ae e0       	ldi	r26, 0x0E	; 14
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	ee e8       	ldi	r30, 0x8E	; 142
 516:	f2 e0       	ldi	r31, 0x02	; 2
 518:	0c 94 57 05 	jmp	0xaae	; 0xaae <__prologue_saves__+0x1c>
 51c:	0d 89       	ldd	r16, Y+21	; 0x15
 51e:	1e 89       	ldd	r17, Y+22	; 0x16
 520:	8f 89       	ldd	r24, Y+23	; 0x17
 522:	98 8d       	ldd	r25, Y+24	; 0x18
 524:	26 e0       	ldi	r18, 0x06	; 6
 526:	2c 83       	std	Y+4, r18	; 0x04
 528:	1a 83       	std	Y+2, r17	; 0x02
 52a:	09 83       	std	Y+1, r16	; 0x01
 52c:	97 ff       	sbrs	r25, 7
 52e:	02 c0       	rjmp	.+4      	; 0x534 <snprintf+0x24>
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e8       	ldi	r25, 0x80	; 128
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	9e 83       	std	Y+6, r25	; 0x06
 538:	8d 83       	std	Y+5, r24	; 0x05
 53a:	ae 01       	movw	r20, r28
 53c:	45 5e       	subi	r20, 0xE5	; 229
 53e:	5f 4f       	sbci	r21, 0xFF	; 255
 540:	69 8d       	ldd	r22, Y+25	; 0x19
 542:	7a 8d       	ldd	r23, Y+26	; 0x1a
 544:	ce 01       	movw	r24, r28
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	0e 94 b8 02 	call	0x570	; 0x570 <vfprintf>
 54c:	4d 81       	ldd	r20, Y+5	; 0x05
 54e:	5e 81       	ldd	r21, Y+6	; 0x06
 550:	57 fd       	sbrc	r21, 7
 552:	0a c0       	rjmp	.+20     	; 0x568 <snprintf+0x58>
 554:	2f 81       	ldd	r18, Y+7	; 0x07
 556:	38 85       	ldd	r19, Y+8	; 0x08
 558:	42 17       	cp	r20, r18
 55a:	53 07       	cpc	r21, r19
 55c:	0c f4       	brge	.+2      	; 0x560 <snprintf+0x50>
 55e:	9a 01       	movw	r18, r20
 560:	f8 01       	movw	r30, r16
 562:	e2 0f       	add	r30, r18
 564:	f3 1f       	adc	r31, r19
 566:	10 82       	st	Z, r1
 568:	2e 96       	adiw	r28, 0x0e	; 14
 56a:	e4 e0       	ldi	r30, 0x04	; 4
 56c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__epilogue_restores__+0x1c>

00000570 <vfprintf>:
 570:	ab e0       	ldi	r26, 0x0B	; 11
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	ee eb       	ldi	r30, 0xBE	; 190
 576:	f2 e0       	ldi	r31, 0x02	; 2
 578:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__prologue_saves__>
 57c:	6c 01       	movw	r12, r24
 57e:	7b 01       	movw	r14, r22
 580:	8a 01       	movw	r16, r20
 582:	fc 01       	movw	r30, r24
 584:	17 82       	std	Z+7, r1	; 0x07
 586:	16 82       	std	Z+6, r1	; 0x06
 588:	83 81       	ldd	r24, Z+3	; 0x03
 58a:	81 ff       	sbrs	r24, 1
 58c:	cc c1       	rjmp	.+920    	; 0x926 <__stack+0x27>
 58e:	ce 01       	movw	r24, r28
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	3c 01       	movw	r6, r24
 594:	f6 01       	movw	r30, r12
 596:	93 81       	ldd	r25, Z+3	; 0x03
 598:	f7 01       	movw	r30, r14
 59a:	93 fd       	sbrc	r25, 3
 59c:	85 91       	lpm	r24, Z+
 59e:	93 ff       	sbrs	r25, 3
 5a0:	81 91       	ld	r24, Z+
 5a2:	7f 01       	movw	r14, r30
 5a4:	88 23       	and	r24, r24
 5a6:	09 f4       	brne	.+2      	; 0x5aa <vfprintf+0x3a>
 5a8:	ba c1       	rjmp	.+884    	; 0x91e <__stack+0x1f>
 5aa:	85 32       	cpi	r24, 0x25	; 37
 5ac:	39 f4       	brne	.+14     	; 0x5bc <vfprintf+0x4c>
 5ae:	93 fd       	sbrc	r25, 3
 5b0:	85 91       	lpm	r24, Z+
 5b2:	93 ff       	sbrs	r25, 3
 5b4:	81 91       	ld	r24, Z+
 5b6:	7f 01       	movw	r14, r30
 5b8:	85 32       	cpi	r24, 0x25	; 37
 5ba:	29 f4       	brne	.+10     	; 0x5c6 <vfprintf+0x56>
 5bc:	b6 01       	movw	r22, r12
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 5c4:	e7 cf       	rjmp	.-50     	; 0x594 <vfprintf+0x24>
 5c6:	91 2c       	mov	r9, r1
 5c8:	21 2c       	mov	r2, r1
 5ca:	31 2c       	mov	r3, r1
 5cc:	ff e1       	ldi	r31, 0x1F	; 31
 5ce:	f3 15       	cp	r31, r3
 5d0:	d8 f0       	brcs	.+54     	; 0x608 <vfprintf+0x98>
 5d2:	8b 32       	cpi	r24, 0x2B	; 43
 5d4:	79 f0       	breq	.+30     	; 0x5f4 <vfprintf+0x84>
 5d6:	38 f4       	brcc	.+14     	; 0x5e6 <vfprintf+0x76>
 5d8:	80 32       	cpi	r24, 0x20	; 32
 5da:	79 f0       	breq	.+30     	; 0x5fa <vfprintf+0x8a>
 5dc:	83 32       	cpi	r24, 0x23	; 35
 5de:	a1 f4       	brne	.+40     	; 0x608 <vfprintf+0x98>
 5e0:	23 2d       	mov	r18, r3
 5e2:	20 61       	ori	r18, 0x10	; 16
 5e4:	1d c0       	rjmp	.+58     	; 0x620 <vfprintf+0xb0>
 5e6:	8d 32       	cpi	r24, 0x2D	; 45
 5e8:	61 f0       	breq	.+24     	; 0x602 <vfprintf+0x92>
 5ea:	80 33       	cpi	r24, 0x30	; 48
 5ec:	69 f4       	brne	.+26     	; 0x608 <vfprintf+0x98>
 5ee:	23 2d       	mov	r18, r3
 5f0:	21 60       	ori	r18, 0x01	; 1
 5f2:	16 c0       	rjmp	.+44     	; 0x620 <vfprintf+0xb0>
 5f4:	83 2d       	mov	r24, r3
 5f6:	82 60       	ori	r24, 0x02	; 2
 5f8:	38 2e       	mov	r3, r24
 5fa:	e3 2d       	mov	r30, r3
 5fc:	e4 60       	ori	r30, 0x04	; 4
 5fe:	3e 2e       	mov	r3, r30
 600:	2a c0       	rjmp	.+84     	; 0x656 <vfprintf+0xe6>
 602:	f3 2d       	mov	r31, r3
 604:	f8 60       	ori	r31, 0x08	; 8
 606:	1d c0       	rjmp	.+58     	; 0x642 <vfprintf+0xd2>
 608:	37 fc       	sbrc	r3, 7
 60a:	2d c0       	rjmp	.+90     	; 0x666 <vfprintf+0xf6>
 60c:	20 ed       	ldi	r18, 0xD0	; 208
 60e:	28 0f       	add	r18, r24
 610:	2a 30       	cpi	r18, 0x0A	; 10
 612:	40 f0       	brcs	.+16     	; 0x624 <vfprintf+0xb4>
 614:	8e 32       	cpi	r24, 0x2E	; 46
 616:	b9 f4       	brne	.+46     	; 0x646 <vfprintf+0xd6>
 618:	36 fc       	sbrc	r3, 6
 61a:	81 c1       	rjmp	.+770    	; 0x91e <__stack+0x1f>
 61c:	23 2d       	mov	r18, r3
 61e:	20 64       	ori	r18, 0x40	; 64
 620:	32 2e       	mov	r3, r18
 622:	19 c0       	rjmp	.+50     	; 0x656 <vfprintf+0xe6>
 624:	36 fe       	sbrs	r3, 6
 626:	06 c0       	rjmp	.+12     	; 0x634 <vfprintf+0xc4>
 628:	8a e0       	ldi	r24, 0x0A	; 10
 62a:	98 9e       	mul	r9, r24
 62c:	20 0d       	add	r18, r0
 62e:	11 24       	eor	r1, r1
 630:	92 2e       	mov	r9, r18
 632:	11 c0       	rjmp	.+34     	; 0x656 <vfprintf+0xe6>
 634:	ea e0       	ldi	r30, 0x0A	; 10
 636:	2e 9e       	mul	r2, r30
 638:	20 0d       	add	r18, r0
 63a:	11 24       	eor	r1, r1
 63c:	22 2e       	mov	r2, r18
 63e:	f3 2d       	mov	r31, r3
 640:	f0 62       	ori	r31, 0x20	; 32
 642:	3f 2e       	mov	r3, r31
 644:	08 c0       	rjmp	.+16     	; 0x656 <vfprintf+0xe6>
 646:	8c 36       	cpi	r24, 0x6C	; 108
 648:	21 f4       	brne	.+8      	; 0x652 <vfprintf+0xe2>
 64a:	83 2d       	mov	r24, r3
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	38 2e       	mov	r3, r24
 650:	02 c0       	rjmp	.+4      	; 0x656 <vfprintf+0xe6>
 652:	88 36       	cpi	r24, 0x68	; 104
 654:	41 f4       	brne	.+16     	; 0x666 <vfprintf+0xf6>
 656:	f7 01       	movw	r30, r14
 658:	93 fd       	sbrc	r25, 3
 65a:	85 91       	lpm	r24, Z+
 65c:	93 ff       	sbrs	r25, 3
 65e:	81 91       	ld	r24, Z+
 660:	7f 01       	movw	r14, r30
 662:	81 11       	cpse	r24, r1
 664:	b3 cf       	rjmp	.-154    	; 0x5cc <vfprintf+0x5c>
 666:	98 2f       	mov	r25, r24
 668:	9f 7d       	andi	r25, 0xDF	; 223
 66a:	95 54       	subi	r25, 0x45	; 69
 66c:	93 30       	cpi	r25, 0x03	; 3
 66e:	28 f4       	brcc	.+10     	; 0x67a <vfprintf+0x10a>
 670:	0c 5f       	subi	r16, 0xFC	; 252
 672:	1f 4f       	sbci	r17, 0xFF	; 255
 674:	9f e3       	ldi	r25, 0x3F	; 63
 676:	99 83       	std	Y+1, r25	; 0x01
 678:	0d c0       	rjmp	.+26     	; 0x694 <vfprintf+0x124>
 67a:	83 36       	cpi	r24, 0x63	; 99
 67c:	31 f0       	breq	.+12     	; 0x68a <vfprintf+0x11a>
 67e:	83 37       	cpi	r24, 0x73	; 115
 680:	71 f0       	breq	.+28     	; 0x69e <vfprintf+0x12e>
 682:	83 35       	cpi	r24, 0x53	; 83
 684:	09 f0       	breq	.+2      	; 0x688 <vfprintf+0x118>
 686:	59 c0       	rjmp	.+178    	; 0x73a <vfprintf+0x1ca>
 688:	21 c0       	rjmp	.+66     	; 0x6cc <vfprintf+0x15c>
 68a:	f8 01       	movw	r30, r16
 68c:	80 81       	ld	r24, Z
 68e:	89 83       	std	Y+1, r24	; 0x01
 690:	0e 5f       	subi	r16, 0xFE	; 254
 692:	1f 4f       	sbci	r17, 0xFF	; 255
 694:	88 24       	eor	r8, r8
 696:	83 94       	inc	r8
 698:	91 2c       	mov	r9, r1
 69a:	53 01       	movw	r10, r6
 69c:	13 c0       	rjmp	.+38     	; 0x6c4 <vfprintf+0x154>
 69e:	28 01       	movw	r4, r16
 6a0:	f2 e0       	ldi	r31, 0x02	; 2
 6a2:	4f 0e       	add	r4, r31
 6a4:	51 1c       	adc	r5, r1
 6a6:	f8 01       	movw	r30, r16
 6a8:	a0 80       	ld	r10, Z
 6aa:	b1 80       	ldd	r11, Z+1	; 0x01
 6ac:	36 fe       	sbrs	r3, 6
 6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <vfprintf+0x146>
 6b0:	69 2d       	mov	r22, r9
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <vfprintf+0x14a>
 6b6:	6f ef       	ldi	r22, 0xFF	; 255
 6b8:	7f ef       	ldi	r23, 0xFF	; 255
 6ba:	c5 01       	movw	r24, r10
 6bc:	0e 94 a4 04 	call	0x948	; 0x948 <strnlen>
 6c0:	4c 01       	movw	r8, r24
 6c2:	82 01       	movw	r16, r4
 6c4:	f3 2d       	mov	r31, r3
 6c6:	ff 77       	andi	r31, 0x7F	; 127
 6c8:	3f 2e       	mov	r3, r31
 6ca:	16 c0       	rjmp	.+44     	; 0x6f8 <vfprintf+0x188>
 6cc:	28 01       	movw	r4, r16
 6ce:	22 e0       	ldi	r18, 0x02	; 2
 6d0:	42 0e       	add	r4, r18
 6d2:	51 1c       	adc	r5, r1
 6d4:	f8 01       	movw	r30, r16
 6d6:	a0 80       	ld	r10, Z
 6d8:	b1 80       	ldd	r11, Z+1	; 0x01
 6da:	36 fe       	sbrs	r3, 6
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <vfprintf+0x174>
 6de:	69 2d       	mov	r22, r9
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <vfprintf+0x178>
 6e4:	6f ef       	ldi	r22, 0xFF	; 255
 6e6:	7f ef       	ldi	r23, 0xFF	; 255
 6e8:	c5 01       	movw	r24, r10
 6ea:	0e 94 99 04 	call	0x932	; 0x932 <strnlen_P>
 6ee:	4c 01       	movw	r8, r24
 6f0:	f3 2d       	mov	r31, r3
 6f2:	f0 68       	ori	r31, 0x80	; 128
 6f4:	3f 2e       	mov	r3, r31
 6f6:	82 01       	movw	r16, r4
 6f8:	33 fc       	sbrc	r3, 3
 6fa:	1b c0       	rjmp	.+54     	; 0x732 <vfprintf+0x1c2>
 6fc:	82 2d       	mov	r24, r2
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	88 16       	cp	r8, r24
 702:	99 06       	cpc	r9, r25
 704:	b0 f4       	brcc	.+44     	; 0x732 <vfprintf+0x1c2>
 706:	b6 01       	movw	r22, r12
 708:	80 e2       	ldi	r24, 0x20	; 32
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 710:	2a 94       	dec	r2
 712:	f4 cf       	rjmp	.-24     	; 0x6fc <vfprintf+0x18c>
 714:	f5 01       	movw	r30, r10
 716:	37 fc       	sbrc	r3, 7
 718:	85 91       	lpm	r24, Z+
 71a:	37 fe       	sbrs	r3, 7
 71c:	81 91       	ld	r24, Z+
 71e:	5f 01       	movw	r10, r30
 720:	b6 01       	movw	r22, r12
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 728:	21 10       	cpse	r2, r1
 72a:	2a 94       	dec	r2
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	82 1a       	sub	r8, r18
 730:	91 08       	sbc	r9, r1
 732:	81 14       	cp	r8, r1
 734:	91 04       	cpc	r9, r1
 736:	71 f7       	brne	.-36     	; 0x714 <vfprintf+0x1a4>
 738:	e8 c0       	rjmp	.+464    	; 0x90a <__stack+0xb>
 73a:	84 36       	cpi	r24, 0x64	; 100
 73c:	11 f0       	breq	.+4      	; 0x742 <vfprintf+0x1d2>
 73e:	89 36       	cpi	r24, 0x69	; 105
 740:	41 f5       	brne	.+80     	; 0x792 <vfprintf+0x222>
 742:	f8 01       	movw	r30, r16
 744:	37 fe       	sbrs	r3, 7
 746:	07 c0       	rjmp	.+14     	; 0x756 <vfprintf+0x1e6>
 748:	60 81       	ld	r22, Z
 74a:	71 81       	ldd	r23, Z+1	; 0x01
 74c:	82 81       	ldd	r24, Z+2	; 0x02
 74e:	93 81       	ldd	r25, Z+3	; 0x03
 750:	0c 5f       	subi	r16, 0xFC	; 252
 752:	1f 4f       	sbci	r17, 0xFF	; 255
 754:	08 c0       	rjmp	.+16     	; 0x766 <vfprintf+0x1f6>
 756:	60 81       	ld	r22, Z
 758:	71 81       	ldd	r23, Z+1	; 0x01
 75a:	07 2e       	mov	r0, r23
 75c:	00 0c       	add	r0, r0
 75e:	88 0b       	sbc	r24, r24
 760:	99 0b       	sbc	r25, r25
 762:	0e 5f       	subi	r16, 0xFE	; 254
 764:	1f 4f       	sbci	r17, 0xFF	; 255
 766:	f3 2d       	mov	r31, r3
 768:	ff 76       	andi	r31, 0x6F	; 111
 76a:	3f 2e       	mov	r3, r31
 76c:	97 ff       	sbrs	r25, 7
 76e:	09 c0       	rjmp	.+18     	; 0x782 <vfprintf+0x212>
 770:	90 95       	com	r25
 772:	80 95       	com	r24
 774:	70 95       	com	r23
 776:	61 95       	neg	r22
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	8f 4f       	sbci	r24, 0xFF	; 255
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	f0 68       	ori	r31, 0x80	; 128
 780:	3f 2e       	mov	r3, r31
 782:	2a e0       	ldi	r18, 0x0A	; 10
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	a3 01       	movw	r20, r6
 788:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ultoa_invert>
 78c:	88 2e       	mov	r8, r24
 78e:	86 18       	sub	r8, r6
 790:	45 c0       	rjmp	.+138    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 792:	85 37       	cpi	r24, 0x75	; 117
 794:	31 f4       	brne	.+12     	; 0x7a2 <vfprintf+0x232>
 796:	23 2d       	mov	r18, r3
 798:	2f 7e       	andi	r18, 0xEF	; 239
 79a:	b2 2e       	mov	r11, r18
 79c:	2a e0       	ldi	r18, 0x0A	; 10
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	25 c0       	rjmp	.+74     	; 0x7ec <vfprintf+0x27c>
 7a2:	93 2d       	mov	r25, r3
 7a4:	99 7f       	andi	r25, 0xF9	; 249
 7a6:	b9 2e       	mov	r11, r25
 7a8:	8f 36       	cpi	r24, 0x6F	; 111
 7aa:	c1 f0       	breq	.+48     	; 0x7dc <vfprintf+0x26c>
 7ac:	18 f4       	brcc	.+6      	; 0x7b4 <vfprintf+0x244>
 7ae:	88 35       	cpi	r24, 0x58	; 88
 7b0:	79 f0       	breq	.+30     	; 0x7d0 <vfprintf+0x260>
 7b2:	b5 c0       	rjmp	.+362    	; 0x91e <__stack+0x1f>
 7b4:	80 37       	cpi	r24, 0x70	; 112
 7b6:	19 f0       	breq	.+6      	; 0x7be <vfprintf+0x24e>
 7b8:	88 37       	cpi	r24, 0x78	; 120
 7ba:	21 f0       	breq	.+8      	; 0x7c4 <vfprintf+0x254>
 7bc:	b0 c0       	rjmp	.+352    	; 0x91e <__stack+0x1f>
 7be:	e9 2f       	mov	r30, r25
 7c0:	e0 61       	ori	r30, 0x10	; 16
 7c2:	be 2e       	mov	r11, r30
 7c4:	b4 fe       	sbrs	r11, 4
 7c6:	0d c0       	rjmp	.+26     	; 0x7e2 <vfprintf+0x272>
 7c8:	fb 2d       	mov	r31, r11
 7ca:	f4 60       	ori	r31, 0x04	; 4
 7cc:	bf 2e       	mov	r11, r31
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <vfprintf+0x272>
 7d0:	34 fe       	sbrs	r3, 4
 7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <vfprintf+0x278>
 7d4:	29 2f       	mov	r18, r25
 7d6:	26 60       	ori	r18, 0x06	; 6
 7d8:	b2 2e       	mov	r11, r18
 7da:	06 c0       	rjmp	.+12     	; 0x7e8 <vfprintf+0x278>
 7dc:	28 e0       	ldi	r18, 0x08	; 8
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	05 c0       	rjmp	.+10     	; 0x7ec <vfprintf+0x27c>
 7e2:	20 e1       	ldi	r18, 0x10	; 16
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0x27c>
 7e8:	20 e1       	ldi	r18, 0x10	; 16
 7ea:	32 e0       	ldi	r19, 0x02	; 2
 7ec:	f8 01       	movw	r30, r16
 7ee:	b7 fe       	sbrs	r11, 7
 7f0:	07 c0       	rjmp	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	82 81       	ldd	r24, Z+2	; 0x02
 7f8:	93 81       	ldd	r25, Z+3	; 0x03
 7fa:	0c 5f       	subi	r16, 0xFC	; 252
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	06 c0       	rjmp	.+12     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 800:	60 81       	ld	r22, Z
 802:	71 81       	ldd	r23, Z+1	; 0x01
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 5f       	subi	r16, 0xFE	; 254
 80a:	1f 4f       	sbci	r17, 0xFF	; 255
 80c:	a3 01       	movw	r20, r6
 80e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ultoa_invert>
 812:	88 2e       	mov	r8, r24
 814:	86 18       	sub	r8, r6
 816:	fb 2d       	mov	r31, r11
 818:	ff 77       	andi	r31, 0x7F	; 127
 81a:	3f 2e       	mov	r3, r31
 81c:	36 fe       	sbrs	r3, 6
 81e:	0d c0       	rjmp	.+26     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 820:	23 2d       	mov	r18, r3
 822:	2e 7f       	andi	r18, 0xFE	; 254
 824:	a2 2e       	mov	r10, r18
 826:	89 14       	cp	r8, r9
 828:	58 f4       	brcc	.+22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 82a:	34 fe       	sbrs	r3, 4
 82c:	0b c0       	rjmp	.+22     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 82e:	32 fc       	sbrc	r3, 2
 830:	09 c0       	rjmp	.+18     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 832:	83 2d       	mov	r24, r3
 834:	8e 7e       	andi	r24, 0xEE	; 238
 836:	a8 2e       	mov	r10, r24
 838:	05 c0       	rjmp	.+10     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83a:	b8 2c       	mov	r11, r8
 83c:	a3 2c       	mov	r10, r3
 83e:	03 c0       	rjmp	.+6      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 840:	b8 2c       	mov	r11, r8
 842:	01 c0       	rjmp	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 844:	b9 2c       	mov	r11, r9
 846:	a4 fe       	sbrs	r10, 4
 848:	0f c0       	rjmp	.+30     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 84a:	fe 01       	movw	r30, r28
 84c:	e8 0d       	add	r30, r8
 84e:	f1 1d       	adc	r31, r1
 850:	80 81       	ld	r24, Z
 852:	80 33       	cpi	r24, 0x30	; 48
 854:	21 f4       	brne	.+8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 856:	9a 2d       	mov	r25, r10
 858:	99 7e       	andi	r25, 0xE9	; 233
 85a:	a9 2e       	mov	r10, r25
 85c:	09 c0       	rjmp	.+18     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 85e:	a2 fe       	sbrs	r10, 2
 860:	06 c0       	rjmp	.+12     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 862:	b3 94       	inc	r11
 864:	b3 94       	inc	r11
 866:	04 c0       	rjmp	.+8      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 868:	8a 2d       	mov	r24, r10
 86a:	86 78       	andi	r24, 0x86	; 134
 86c:	09 f0       	breq	.+2      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86e:	b3 94       	inc	r11
 870:	a3 fc       	sbrc	r10, 3
 872:	11 c0       	rjmp	.+34     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 874:	a0 fe       	sbrs	r10, 0
 876:	06 c0       	rjmp	.+12     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 878:	b2 14       	cp	r11, r2
 87a:	88 f4       	brcc	.+34     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 87c:	28 0c       	add	r2, r8
 87e:	92 2c       	mov	r9, r2
 880:	9b 18       	sub	r9, r11
 882:	0e c0       	rjmp	.+28     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 884:	b2 14       	cp	r11, r2
 886:	60 f4       	brcc	.+24     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 888:	b6 01       	movw	r22, r12
 88a:	80 e2       	ldi	r24, 0x20	; 32
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 892:	b3 94       	inc	r11
 894:	f7 cf       	rjmp	.-18     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 896:	b2 14       	cp	r11, r2
 898:	18 f4       	brcc	.+6      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 89a:	2b 18       	sub	r2, r11
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89e:	98 2c       	mov	r9, r8
 8a0:	21 2c       	mov	r2, r1
 8a2:	a4 fe       	sbrs	r10, 4
 8a4:	10 c0       	rjmp	.+32     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8a6:	b6 01       	movw	r22, r12
 8a8:	80 e3       	ldi	r24, 0x30	; 48
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 8b0:	a2 fe       	sbrs	r10, 2
 8b2:	17 c0       	rjmp	.+46     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8b4:	a1 fc       	sbrc	r10, 1
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8b8:	88 e7       	ldi	r24, 0x78	; 120
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8be:	88 e5       	ldi	r24, 0x58	; 88
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	b6 01       	movw	r22, r12
 8c4:	0c c0       	rjmp	.+24     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8c6:	8a 2d       	mov	r24, r10
 8c8:	86 78       	andi	r24, 0x86	; 134
 8ca:	59 f0       	breq	.+22     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8cc:	a1 fe       	sbrs	r10, 1
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8d0:	8b e2       	ldi	r24, 0x2B	; 43
 8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8d4:	80 e2       	ldi	r24, 0x20	; 32
 8d6:	a7 fc       	sbrc	r10, 7
 8d8:	8d e2       	ldi	r24, 0x2D	; 45
 8da:	b6 01       	movw	r22, r12
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 8e2:	89 14       	cp	r8, r9
 8e4:	38 f4       	brcc	.+14     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8e6:	b6 01       	movw	r22, r12
 8e8:	80 e3       	ldi	r24, 0x30	; 48
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 8f0:	9a 94       	dec	r9
 8f2:	f7 cf       	rjmp	.-18     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8f4:	8a 94       	dec	r8
 8f6:	f3 01       	movw	r30, r6
 8f8:	e8 0d       	add	r30, r8
 8fa:	f1 1d       	adc	r31, r1
 8fc:	80 81       	ld	r24, Z
 8fe:	b6 01       	movw	r22, r12
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 906:	81 10       	cpse	r8, r1
 908:	f5 cf       	rjmp	.-22     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 90a:	22 20       	and	r2, r2
 90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
 90e:	42 ce       	rjmp	.-892    	; 0x594 <vfprintf+0x24>
 910:	b6 01       	movw	r22, r12
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 af 04 	call	0x95e	; 0x95e <fputc>
 91a:	2a 94       	dec	r2
 91c:	f6 cf       	rjmp	.-20     	; 0x90a <__stack+0xb>
 91e:	f6 01       	movw	r30, r12
 920:	86 81       	ldd	r24, Z+6	; 0x06
 922:	97 81       	ldd	r25, Z+7	; 0x07
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
 926:	8f ef       	ldi	r24, 0xFF	; 255
 928:	9f ef       	ldi	r25, 0xFF	; 255
 92a:	2b 96       	adiw	r28, 0x0b	; 11
 92c:	e2 e1       	ldi	r30, 0x12	; 18
 92e:	0c 94 65 05 	jmp	0xaca	; 0xaca <__epilogue_restores__>

00000932 <strnlen_P>:
 932:	fc 01       	movw	r30, r24
 934:	05 90       	lpm	r0, Z+
 936:	61 50       	subi	r22, 0x01	; 1
 938:	70 40       	sbci	r23, 0x00	; 0
 93a:	01 10       	cpse	r0, r1
 93c:	d8 f7       	brcc	.-10     	; 0x934 <strnlen_P+0x2>
 93e:	80 95       	com	r24
 940:	90 95       	com	r25
 942:	8e 0f       	add	r24, r30
 944:	9f 1f       	adc	r25, r31
 946:	08 95       	ret

00000948 <strnlen>:
 948:	fc 01       	movw	r30, r24
 94a:	61 50       	subi	r22, 0x01	; 1
 94c:	70 40       	sbci	r23, 0x00	; 0
 94e:	01 90       	ld	r0, Z+
 950:	01 10       	cpse	r0, r1
 952:	d8 f7       	brcc	.-10     	; 0x94a <strnlen+0x2>
 954:	80 95       	com	r24
 956:	90 95       	com	r25
 958:	8e 0f       	add	r24, r30
 95a:	9f 1f       	adc	r25, r31
 95c:	08 95       	ret

0000095e <fputc>:
 95e:	0f 93       	push	r16
 960:	1f 93       	push	r17
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	fb 01       	movw	r30, r22
 968:	23 81       	ldd	r18, Z+3	; 0x03
 96a:	21 fd       	sbrc	r18, 1
 96c:	03 c0       	rjmp	.+6      	; 0x974 <fputc+0x16>
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	9f ef       	ldi	r25, 0xFF	; 255
 972:	2c c0       	rjmp	.+88     	; 0x9cc <fputc+0x6e>
 974:	22 ff       	sbrs	r18, 2
 976:	16 c0       	rjmp	.+44     	; 0x9a4 <fputc+0x46>
 978:	46 81       	ldd	r20, Z+6	; 0x06
 97a:	57 81       	ldd	r21, Z+7	; 0x07
 97c:	24 81       	ldd	r18, Z+4	; 0x04
 97e:	35 81       	ldd	r19, Z+5	; 0x05
 980:	42 17       	cp	r20, r18
 982:	53 07       	cpc	r21, r19
 984:	44 f4       	brge	.+16     	; 0x996 <fputc+0x38>
 986:	a0 81       	ld	r26, Z
 988:	b1 81       	ldd	r27, Z+1	; 0x01
 98a:	9d 01       	movw	r18, r26
 98c:	2f 5f       	subi	r18, 0xFF	; 255
 98e:	3f 4f       	sbci	r19, 0xFF	; 255
 990:	31 83       	std	Z+1, r19	; 0x01
 992:	20 83       	st	Z, r18
 994:	8c 93       	st	X, r24
 996:	26 81       	ldd	r18, Z+6	; 0x06
 998:	37 81       	ldd	r19, Z+7	; 0x07
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	37 83       	std	Z+7, r19	; 0x07
 9a0:	26 83       	std	Z+6, r18	; 0x06
 9a2:	14 c0       	rjmp	.+40     	; 0x9cc <fputc+0x6e>
 9a4:	8b 01       	movw	r16, r22
 9a6:	ec 01       	movw	r28, r24
 9a8:	fb 01       	movw	r30, r22
 9aa:	00 84       	ldd	r0, Z+8	; 0x08
 9ac:	f1 85       	ldd	r31, Z+9	; 0x09
 9ae:	e0 2d       	mov	r30, r0
 9b0:	09 95       	icall
 9b2:	89 2b       	or	r24, r25
 9b4:	e1 f6       	brne	.-72     	; 0x96e <fputc+0x10>
 9b6:	d8 01       	movw	r26, r16
 9b8:	16 96       	adiw	r26, 0x06	; 6
 9ba:	8d 91       	ld	r24, X+
 9bc:	9c 91       	ld	r25, X
 9be:	17 97       	sbiw	r26, 0x07	; 7
 9c0:	01 96       	adiw	r24, 0x01	; 1
 9c2:	17 96       	adiw	r26, 0x07	; 7
 9c4:	9c 93       	st	X, r25
 9c6:	8e 93       	st	-X, r24
 9c8:	16 97       	sbiw	r26, 0x06	; 6
 9ca:	ce 01       	movw	r24, r28
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	08 95       	ret

000009d6 <__ultoa_invert>:
 9d6:	fa 01       	movw	r30, r20
 9d8:	aa 27       	eor	r26, r26
 9da:	28 30       	cpi	r18, 0x08	; 8
 9dc:	51 f1       	breq	.+84     	; 0xa32 <__ultoa_invert+0x5c>
 9de:	20 31       	cpi	r18, 0x10	; 16
 9e0:	81 f1       	breq	.+96     	; 0xa42 <__ultoa_invert+0x6c>
 9e2:	e8 94       	clt
 9e4:	6f 93       	push	r22
 9e6:	6e 7f       	andi	r22, 0xFE	; 254
 9e8:	6e 5f       	subi	r22, 0xFE	; 254
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	af 4f       	sbci	r26, 0xFF	; 255
 9f2:	b1 e0       	ldi	r27, 0x01	; 1
 9f4:	3e d0       	rcall	.+124    	; 0xa72 <__ultoa_invert+0x9c>
 9f6:	b4 e0       	ldi	r27, 0x04	; 4
 9f8:	3c d0       	rcall	.+120    	; 0xa72 <__ultoa_invert+0x9c>
 9fa:	67 0f       	add	r22, r23
 9fc:	78 1f       	adc	r23, r24
 9fe:	89 1f       	adc	r24, r25
 a00:	9a 1f       	adc	r25, r26
 a02:	a1 1d       	adc	r26, r1
 a04:	68 0f       	add	r22, r24
 a06:	79 1f       	adc	r23, r25
 a08:	8a 1f       	adc	r24, r26
 a0a:	91 1d       	adc	r25, r1
 a0c:	a1 1d       	adc	r26, r1
 a0e:	6a 0f       	add	r22, r26
 a10:	71 1d       	adc	r23, r1
 a12:	81 1d       	adc	r24, r1
 a14:	91 1d       	adc	r25, r1
 a16:	a1 1d       	adc	r26, r1
 a18:	20 d0       	rcall	.+64     	; 0xa5a <__ultoa_invert+0x84>
 a1a:	09 f4       	brne	.+2      	; 0xa1e <__ultoa_invert+0x48>
 a1c:	68 94       	set
 a1e:	3f 91       	pop	r19
 a20:	2a e0       	ldi	r18, 0x0A	; 10
 a22:	26 9f       	mul	r18, r22
 a24:	11 24       	eor	r1, r1
 a26:	30 19       	sub	r19, r0
 a28:	30 5d       	subi	r19, 0xD0	; 208
 a2a:	31 93       	st	Z+, r19
 a2c:	de f6       	brtc	.-74     	; 0x9e4 <__ultoa_invert+0xe>
 a2e:	cf 01       	movw	r24, r30
 a30:	08 95       	ret
 a32:	46 2f       	mov	r20, r22
 a34:	47 70       	andi	r20, 0x07	; 7
 a36:	40 5d       	subi	r20, 0xD0	; 208
 a38:	41 93       	st	Z+, r20
 a3a:	b3 e0       	ldi	r27, 0x03	; 3
 a3c:	0f d0       	rcall	.+30     	; 0xa5c <__ultoa_invert+0x86>
 a3e:	c9 f7       	brne	.-14     	; 0xa32 <__ultoa_invert+0x5c>
 a40:	f6 cf       	rjmp	.-20     	; 0xa2e <__ultoa_invert+0x58>
 a42:	46 2f       	mov	r20, r22
 a44:	4f 70       	andi	r20, 0x0F	; 15
 a46:	40 5d       	subi	r20, 0xD0	; 208
 a48:	4a 33       	cpi	r20, 0x3A	; 58
 a4a:	18 f0       	brcs	.+6      	; 0xa52 <__ultoa_invert+0x7c>
 a4c:	49 5d       	subi	r20, 0xD9	; 217
 a4e:	31 fd       	sbrc	r19, 1
 a50:	40 52       	subi	r20, 0x20	; 32
 a52:	41 93       	st	Z+, r20
 a54:	02 d0       	rcall	.+4      	; 0xa5a <__ultoa_invert+0x84>
 a56:	a9 f7       	brne	.-22     	; 0xa42 <__ultoa_invert+0x6c>
 a58:	ea cf       	rjmp	.-44     	; 0xa2e <__ultoa_invert+0x58>
 a5a:	b4 e0       	ldi	r27, 0x04	; 4
 a5c:	a6 95       	lsr	r26
 a5e:	97 95       	ror	r25
 a60:	87 95       	ror	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	ba 95       	dec	r27
 a68:	c9 f7       	brne	.-14     	; 0xa5c <__ultoa_invert+0x86>
 a6a:	00 97       	sbiw	r24, 0x00	; 0
 a6c:	61 05       	cpc	r22, r1
 a6e:	71 05       	cpc	r23, r1
 a70:	08 95       	ret
 a72:	9b 01       	movw	r18, r22
 a74:	ac 01       	movw	r20, r24
 a76:	0a 2e       	mov	r0, r26
 a78:	06 94       	lsr	r0
 a7a:	57 95       	ror	r21
 a7c:	47 95       	ror	r20
 a7e:	37 95       	ror	r19
 a80:	27 95       	ror	r18
 a82:	ba 95       	dec	r27
 a84:	c9 f7       	brne	.-14     	; 0xa78 <__ultoa_invert+0xa2>
 a86:	62 0f       	add	r22, r18
 a88:	73 1f       	adc	r23, r19
 a8a:	84 1f       	adc	r24, r20
 a8c:	95 1f       	adc	r25, r21
 a8e:	a0 1d       	adc	r26, r0
 a90:	08 95       	ret

00000a92 <__prologue_saves__>:
 a92:	2f 92       	push	r2
 a94:	3f 92       	push	r3
 a96:	4f 92       	push	r4
 a98:	5f 92       	push	r5
 a9a:	6f 92       	push	r6
 a9c:	7f 92       	push	r7
 a9e:	8f 92       	push	r8
 aa0:	9f 92       	push	r9
 aa2:	af 92       	push	r10
 aa4:	bf 92       	push	r11
 aa6:	cf 92       	push	r12
 aa8:	df 92       	push	r13
 aaa:	ef 92       	push	r14
 aac:	ff 92       	push	r15
 aae:	0f 93       	push	r16
 ab0:	1f 93       	push	r17
 ab2:	cf 93       	push	r28
 ab4:	df 93       	push	r29
 ab6:	cd b7       	in	r28, 0x3d	; 61
 ab8:	de b7       	in	r29, 0x3e	; 62
 aba:	ca 1b       	sub	r28, r26
 abc:	db 0b       	sbc	r29, r27
 abe:	0f b6       	in	r0, 0x3f	; 63
 ac0:	f8 94       	cli
 ac2:	de bf       	out	0x3e, r29	; 62
 ac4:	0f be       	out	0x3f, r0	; 63
 ac6:	cd bf       	out	0x3d, r28	; 61
 ac8:	09 94       	ijmp

00000aca <__epilogue_restores__>:
 aca:	2a 88       	ldd	r2, Y+18	; 0x12
 acc:	39 88       	ldd	r3, Y+17	; 0x11
 ace:	48 88       	ldd	r4, Y+16	; 0x10
 ad0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ad2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ad4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ad6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad8:	9b 84       	ldd	r9, Y+11	; 0x0b
 ada:	aa 84       	ldd	r10, Y+10	; 0x0a
 adc:	b9 84       	ldd	r11, Y+9	; 0x09
 ade:	c8 84       	ldd	r12, Y+8	; 0x08
 ae0:	df 80       	ldd	r13, Y+7	; 0x07
 ae2:	ee 80       	ldd	r14, Y+6	; 0x06
 ae4:	fd 80       	ldd	r15, Y+5	; 0x05
 ae6:	0c 81       	ldd	r16, Y+4	; 0x04
 ae8:	1b 81       	ldd	r17, Y+3	; 0x03
 aea:	aa 81       	ldd	r26, Y+2	; 0x02
 aec:	b9 81       	ldd	r27, Y+1	; 0x01
 aee:	ce 0f       	add	r28, r30
 af0:	d1 1d       	adc	r29, r1
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	f8 94       	cli
 af6:	de bf       	out	0x3e, r29	; 62
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	cd bf       	out	0x3d, r28	; 61
 afc:	ed 01       	movw	r28, r26
 afe:	08 95       	ret

00000b00 <_exit>:
 b00:	f8 94       	cli

00000b02 <__stop_program>:
 b02:	ff cf       	rjmp	.-2      	; 0xb02 <__stop_program>
